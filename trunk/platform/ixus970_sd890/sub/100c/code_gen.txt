//-------------------------- BOOT.C ---------------------------------------------------------------

FILE boot.c

>>> file=../boot_hdr.c

>>>

void taskCreateHook(int *p) {
	p-=16;
	if (p[0]==0xFF821ACC)  p[0]=(int)mykbd_task;
	if (p[0]==0xFF842A44)  p[0]=(int)jogdial_task_my; 
	if (p[0]==0xFF85A004)  p[0]=(int)movie_record_task;
	if (p[0]==0xFF85E03C)  p[0]=(int)capt_seq_task;
	if (p[0]==0xFF878F84)  p[0]=(int)init_file_modules_task;
	if (p[0]==0xFF8B6864)  p[0]=(int)exp_drv_task;
}

void boot()
{
	long *canon_data_src = (void*)0xFFB1E480;
	long *canon_data_dst = (void*)0x1900;
	long canon_data_len = 0xF164 - 0x1900; // data_end - data_start
	long *canon_bss_start = (void*)0xF164; // just after data
	long canon_bss_len = 0xCBD40 - 0xF164;

    long i;


    // Enable CPU caches and MPU
    asm volatile (
    "MRC     p15, 0, R0,c1,c0\n"
    "ORR     R0, R0, #0x1000\n"
    "ORR     R0, R0, #4\n"
    "ORR     R0, R0, #1\n"
    "MCR     p15, 0, R0,c1,c0\n"
    :::"r0");

    for(i=0;i<canon_data_len/4;i++)
    canon_data_dst[i]=canon_data_src[i];

    for(i=0;i<canon_bss_len/4;i++)
    canon_bss_start[i]=0;

    // jump to init-sequence that follows the data-copy-routine
    asm volatile ("B      sub_FF8101A4_my\n");
};

<<<

//////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////
FUNC start=0xFF8101A4 length=27
>>>
    //http://chdk.setepontos.com/index.php/topic,4194.0.html
    *(int*)0x1930=(int)taskCreateHook;

    // replacement of sub_FF8423E8 for correct power-on.
    //(short press = playback mode, long press = record mode)
    *(int*)(0x2290)= (*(int*)0xC02200F8) & 1 ? 0x100000 : 0x200000;
    
<<<

ASM
FW 26
PATCHSUB ref=0
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 7
>>>

#if defined(CHDK_NOT_IN_CANON_HEAP) // use original heap offset if CHDK is loaded in high memory
<<<
FW
>>>
#else
"    LDR     R0, =new_sa\n"   // otherwise use patched value
"    LDR     R0, [R0]\n"      //
#endif

<<<
FW 27
PATCHSUB ref=0 name="uHwSetup_my"
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// uHwSetup_my
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW $-1
PATCHSUB ref=0 name=CreateTask_Startup_my
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// CreateTask_Startup_my
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 12
REM "Removed for correct power-on"
FW 8
PATCHSUB ref=0 name=task_Startup_my
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// task_Startup_my
//////////////////////////////////////////////////////////////
FUNC ref=0 
ASM
FW 6
REM "load DISKBOOT.BIN"
>>>
"    BL      CreateTask_spytask\n" // added
<<<
//FW 2
//PATCHSUB ref=1 name="taskcreatePhySw_my" comment="Checks buttons and acts accordingly"
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// taskcreatePhySw_my
//////////////////////////////////////////////////////////////
//FUNC ref=1
//ASM
//FW 7
//PATCHSUB name=mykbd_task
//PATCHVAL value=0x2000 comment="stack size for new task_PhySw so we don't have to do stack switch"
//FW $
//ENDASM
//ENDFUNC

//////////////////////////////////////////////////////////////
// init_file_modules_task
//////////////////////////////////////////////////////////////
FUNC sig=task_InitFileModules name=init_file_modules_task
ASM
FW 7
PATCHSUB ref=0
>>>
"    BL      core_spytask_can_start\n"  // CHDK: Set "it's-safe-to-start" flag for spytask
<<<
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// init_file_modules_task -> ref=0
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 1
PATCHSUB ref=0
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// init_file_modules_task -> ref=0 -> ref=0
//////////////////////////////////////////////////////////////
FUNC ref=0 length=39
ASM
FW 16
PATCHSUB ref=0
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// init_file_modules_task -> ref=0 -> ref=0 -> ref=0
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 13
PATCHSUB ref=0
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// init_file_modules_task -> ref=0 -> ref=0 -> ref=0 -> ref=0
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 40
>>> file=../FAT32_detect.S
FW 7
REM
FW 12
REM           "Replaced, see below"
>>>
//mod start
"    LDRB    R12, [LR,#0x1FE]\n"           // New! First MBR signature byte (0x55)
"    LDRB    LR, [LR,#0x1FF]\n"            //      Last MBR signature byte (0xAA)
//mod end
<<<
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// jogdial_task_my
//////////////////////////////////////////////////////////////
FUNC sig=task_JogDial name=jogdial_task_my
ASM
FW 15
>>>
//------------------  added code ---------------------
"labelA:\n"
"    LDR     R0, =jogdial_stopped\n"
"    LDR     R0, [R0]\n"
"    CMP     R0, #1\n"
"    BNE     labelB\n"
"    MOV     R0, #40\n"
"    BL      _SleepTask\n"
"    B       labelA\n"
"labelB:\n"
//------------------  original code ------------------

<<<
FW $
ENDASM
ENDFUNC


ENDFILE


//-------------------------- CAPT_SEQ.C -----------------------------------------------------------

FILE capt_seq.c

>>> file=../capt_seq_hdr.c

//////////////////////////////////////////////////////////////
// capt_seq_task
//////////////////////////////////////////////////////////////
FUNC sig=task_CaptSeq name=capt_seq_task
ASM
FW 50
>>>
"    BL      shooting_expo_param_override\n"      // added
<<<
FW 21
PATCHSUB ref=0
>>>
"    BL      capt_seq_hook_raw_here \n"         // added
<<<
FW 3
PATCHSUB ref=1
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// capt_seq_task -> ref=0
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 29
>>>
"    BL      wait_until_remote_button_is_released\n" // added
"    BL      capt_seq_hook_set_nr\n"                 // added
<<<
->FW
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// capt_seq_task -> ref=1
//////////////////////////////////////////////////////////////
FUNC ref=1
ASM
FW 30
>>>
"    BL      capt_seq_hook_raw_here \n"         // added
<<<
->FW
ENDASM
ENDFUNC


//////////////////////////////////////////////////////////////
// exp_drv_task
//////////////////////////////////////////////////////////////
FUNC sig=task_ExpDrv name=exp_drv_task
ASM
FW 235
SKIP 13
FW 13
PATCHSUB ref=0
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// exp_drv_task -> ref=0
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 47
PATCHSUB ref=0
->FW
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// exp_drv_task -> ref=0 -> ref=0
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 16
PATCHSUB name=apex2us
FW $
ENDASM
ENDFUNC
ENDFILE
