//-------------------------- BOOT.C ---------------------------------------------------------------

FILE boot.c

>>> file=../boot_hdr.c

FUNC start=0xFF02000C length=95 name=boot
ASM
FW $-3
>>>
/* Install task hooks via 0x193x is not possible with this new dryos version
   So the below code patches the CreateTask function in RAM to install our
   hook -- ERR99
*/
// Install CreateTask patch
"    LDR     R0, =patch_CreateTask\n"   // Patch data
"    LDM     R0, {R1,R2}\n"             // Get two patch instructions
"    LDR     R0, =hook_CreateTask\n"    // Address to patch
"    STM     R0, {R1,R2}\n"             // Store patch instructions

<<<
PATCHSUB ref=0
>>>

"patch_CreateTask:\n"
"    LDR     PC, [PC,#-0x4]\n"          // Do jump to absolute address CreateTask_my
"    .long   CreateTask_my\n"
<<<
ENDASM
ENDFUNC

FUNC sig=hook_CreateTask name=CreateTask_my
ASM
>>> file=../taskhook.S
FW 2
->FW
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// Power-on patch
//////////////////////////////////////////////////////////////
FUNC ref=0 length=29
>>>

    //Replacement of sub_ for correct power-on.
    //(short press on ON/OFF button = playback mode, long press = record mode)
    // see sub_ff02bbc0 and sub_ff073c68 (100c)
    // NOTE this might break other startup modes (such as NFC)
    *(int*)(0x2cf4+0x8) = (*(int*)0xc022f48c) & 0x80000 ? 0x400000 : 0x200000;

<<<
ASM
FW $-3
PATCHSUB ref=0
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 16
>>>

#if defined(CHDK_NOT_IN_CANON_HEAP) // use original heap offset if CHDK is loaded in high memory
<<<
FW
>>>
#else
"    LDR     R0, =new_sa\n"   // otherwise use patched value
"    LDR     R0, [R0]\n"      //
#endif

<<<
FW 34
PATCHSUB ref=0
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW $-1
PATCHSUB ref=0
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 10
PATCHSUB ref=0
FW 11
PATCHSUB ref=1 name=task_Startup_my
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// Remove power-on mode handling
//////////////////////////////////////////////////////////////
FUNC ref=0 length=44
ASM
FW $-4
REM "Disable StartUpChecks"
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// task_Startup_my
//////////////////////////////////////////////////////////////
FUNC ref=1
ASM
FW 6
REM "load DISKBOOT.BIN"
FW 6
>>>
"    BL      CreateTask_spytask\n" // added
<<<
PATCHSUB ref=0 name=taskcreatePhySw_my
>>>
"    BL      init_required_fw_features\n" // added
<<<
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// taskcreatePhySw_my
//////////////////////////////////////////////////////////////
FUNC ref=0 length=19
ASM
FW 11
PATCHSUB name=mykbd_task
PATCHVAL value=0x2000 comment="stack size for new task_PhySw so we don't have to do stack switch"
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// init_file_modules_task
//////////////////////////////////////////////////////////////

>>>

// Workaround for cards becoming read-only in camera when diskboot'ing to playback mode.
// The following flag is checked by the function that calls WriteSDCard (sub_ff0300dc)
// See the porting thread for related discussions. https://chdk.setepontos.com/index.php?topic=12418
void fix_writable_media_flag() {
    *(int*)0x1d60 = 1;
}
<<<

FUNC sig=task_InitFileModules name=init_file_modules_task
ASM
FW 8
>>>
"    BL      fix_writable_media_flag\n" // port specific hack
"    BL      core_spytask_can_start\n"  // CHDK: Set "it's-safe-to-start" flag for spytask
<<<
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// JogDial_task_my
//////////////////////////////////////////////////////////////
FUNC sig=task_RotaryEncoder name=JogDial_task_my
ASM
FW 8
>>> prelabel

// Save pointer for kbd.c routine
"    LDR     R2, =jog_position \n"
"    STR     R9, [R2] \n"

<<<
FW 42
>>>
//------------------  added code ---------------------
"labelA:\n"
"    LDR     R0, =jogdial_stopped\n"
"    LDR     R0, [R0]\n"
"    CMP     R0, #1\n"
"    BNE     labelB\n"
"    MOV     R0, #40\n"
"    BL      _SleepTask\n"
"    B       labelA\n"
"labelB:\n"
//------------------  original code ------------------
<<<
FW $
ENDASM
ENDFUNC

>>>
/*
    *** TEMPORARY workaround ***
    Init stuff to avoid asserts on cameras running DryOS r54+
    Execute this only once
 */
void init_required_fw_features(void) {
    extern void _init_focus_eventflag();
    //extern void _init_zoom_semaphore(); // for MoveZoomLensWithPoint

    _init_focus_eventflag();
}
<<<

ENDFILE

//-------------------------- CAPT_SEQ.C -----------------------------------------------------------

FILE capt_seq.c

>>> file=../capt_seq_hdr.c

//////////////////////////////////////////////////////////////
// capt_seq_task
//////////////////////////////////////////////////////////////
FUNC sig=task_CaptSeq name=capt_seq_task
ASM
FW 70
>>>
//"    BL      shooting_expo_iso_override\n"      // extra ISO override call doesn't appear to be needed on elph130
<<<
FW 1
>>>
"    BL      shooting_expo_param_override\n"    // added
<<<
FW 1
>>>
// try avoid intermittetant override failues on quick press, not needed?
//"    MOV     R0, #0\n"                          // added
//"    STR     R0, [R5,#0x28]\n"                  // added
<<<
FW 2
//REM "above patch makes these three lines redundant"
//REM
//REM
// hook fast click function for dfs and remote - not needed if using hack above
PATCHSUB ref=0
FW 2
PATCHSUB ref=1
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// patch for dfs + remote in quickshoot branch
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 47
PATCHSUB
>>>
"    BL      capt_seq_hook_raw_here \n"         // added
<<<
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// raw hook
//////////////////////////////////////////////////////////////
FUNC ref=1
ASM
FW 111
PATCHSUB ref=0
>>>
"    BL      capt_seq_hook_raw_here \n"         // added
<<<
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// Common patched function applied to ref=0->noref  and ref=1->ref=0
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 40
>>>
"    BL      wait_until_remote_button_is_released\n" // added
"    BL      capt_seq_hook_set_nr\n"                 // added
<<<
FW 1
->FW
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// exp_drv_task
//////////////////////////////////////////////////////////////
// reyalp - commented out because the actual apex2us part was not implemented
//FUNC sig=task_ExpDrv name=exp_drv_task
//ASM
//FW 293
//PATCHSUB ref=0
//FW $
//ENDASM
//ENDFUNC 

//FUNC ref=0
//ASM
//FW 49
////PATCHSUB ref=0
//->FW
//ENDASM
//ENDFUNC

//FUNC ref=0
//ASM
//FW 18
//PATCHSUB name=apex2us
//->FW
//ENDASM
//ENDFUNC

ENDFILE
//-------------------------- FILEWRITE.C ----------------------------------------------------------
//FILE filewrite.c
//
//>>> file=../filewrite_hdr.c
//
////////////////////////////////////////////////////////////////
//// filewritetask  jeronymo
////////////////////////////////////////////////////////////////
//FUNC sig=task_FileWrite name=filewritetask
//ASM
//FW 55
//PATCHSUB name=fwt_close
//FW 17
//>>>
//
////mod start
//"    LDR R3, =ignore_current_write\n" // !!
//"    LDR R3, [R3]\n"
//"    CMP R3, #0\n"
//"    BNE loc_A\n" // skip creating directory
////mod end
//<<<
//FW 13
//PATCHSUB ref=0 comment="Open stage"
//FW 8
//PATCHSUB name=fwt_lseek
//FW 17
//>>>
//
////mod start
//"    LDR R3, =ignore_current_write\n" // !!
//"    LDR R3, [R3]\n"
//"    CMP R3, #0\n"
//"    BNE loc_B\n" // skip flushing the cache
////mod end
//
//<<<
//FW 3
//>>>
//"loc_B:\n"
//<<<
//FW 1
//>>>
//"loc_A:\n"
//<<<
//FW 8
//PATCHSUB ref=1 comment="Write stage"
//FW 1
//PATCHSUB ref=2 comment="Close stage"
//FW $
//ENDASM
//ENDFUNC
//
////////////////////////////////////////////////////////////////
//// open stage
////////////////////////////////////////////////////////////////
//FUNC ref=0
//ASM
//FW 2
//>>>
////hook placed here to avoid conditional branch a few instructions below (watch out for registers!)
////"  MOV   R0, R4\n"      //data block start, commented out as R0 is already holding what we need
//"    BL filewrite_main_hook\n"
//"    MOV     R0, R4\n"      //restore register(s)
////hook end
//<<<
//FW 33
//PATCHSUB name=fwt_open
//FW 24
//PATCHSUB name=fwt_open
//FW 19
//>>>
//
////mod start
//"    LDR R3, =current_write_ignored\n"
//"    LDR R3, [R3]\n"
//"    CMP R3, #0\n"
//"    BNE loc_C\n" // jump over the next block
////mod end
//
//<<<
//FW 10
//>>>
//"loc_C:\n"
//<<<
//FW $
//ENDASM
//ENDFUNC





