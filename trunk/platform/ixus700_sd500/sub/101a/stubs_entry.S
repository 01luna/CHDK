// !!! THIS FILE IS GENERATED. DO NOT EDIT. !!!
#include "stubs_asm.h"

// Best match: 79%
NHSTUB(AllocateMemory, 0xff811ba0)
NHSTUB(AllocateUncacheableMemory, 0xff813ec0)
// ERROR: Close is not found!
NHSTUB(CreatePhysicalVram, 0xff9332f8)
NHSTUB(CreateTask, 0xff821a10)
NHSTUB(CreateTaskStrict, 0xff822fd8)
NHSTUB(DeleteFile_Fut, 0xff8635f0)
NHSTUB(DisableDispatch, 0xff821780)
// Best match: 93%
NHSTUB(DisplayImagePhysicalScreen, 0xff932ac4)
// ALT: NHSTUB(DisplayImagePhysicalScreen, 0xff932ac4) // 29/2
// Best match: 52%
//NHSTUB(DoAFLock, 0xff94f204) -- stubs_entry_2.S = 0xff94ef7c
NHSTUB(EnableDispatch, 0xff82180c)
// ERROR: EnterToCompensationEVF is not found!
NHSTUB(ExecuteEventProcedure, 0xff816164)
// Best match: 66%
//NHSTUB(ExitFromCompensationEVF, 0xff951a88) -- stubs_entry_2.S = 0x00000000
// ALT: NHSTUB(ExitFromCompensationEVF, 0xff951abc) // 20/10
// ALT: NHSTUB(ExitFromCompensationEVF, 0xff951af0) // 20/10
// ALT: NHSTUB(ExitFromCompensationEVF, 0xff951b24) // 20/10
// ALT: NHSTUB(ExitFromCompensationEVF, 0xff951b58) // 20/10
NHSTUB(ExitTask, 0xff821dd0)
NHSTUB(Fclose_Fut, 0xff863730)
NHSTUB(Feof_Fut, 0xff863944)
NHSTUB(Fflush_Fut, 0xff86397c)
NHSTUB(Fgets_Fut, 0xff8638b4)
NHSTUB(Fopen_Fut, 0xff8636f4)
NHSTUB(Fread_Fut, 0xff863814)
// Best match: 66%
NHSTUB(FreeMemory, 0xff811bac)
NHSTUB(FreeUncacheableMemory, 0xff813ef4)
NHSTUB(Fseek_Fut, 0xff8638fc)
NHSTUB(Fwrite_Fut, 0xff863864)
// ERROR: GetBatteryTemperature is not found!
// ERROR: GetCCDTemperature is not found!
//NHSTUB(GetCurrentAvValue, 0xffa71350) -- stubs_entry_2.S = 0xffa4f304
NHSTUB(GetCurrentTargetDistance, 0xffa712f8)
// Best match: 84%
//NHSTUB(GetDrive_ClusterSize, 0xff86a1c8) -- stubs_entry_2.S = 0xff86a150
// Best match: 72%
//NHSTUB(GetDrive_FreeClusters, 0xff86a150) -- stubs_entry_2.S = 0xff86a1c8
// ALT: NHSTUB(GetDrive_FreeClusters, 0xff86a150) // 18/7
// ALT: NHSTUB(GetDrive_FreeClusters, 0xff86a18c) // 18/7
// ALT: NHSTUB(GetDrive_FreeClusters, 0xff86a18c) // 18/7
// ALT: NHSTUB(GetDrive_FreeClusters, 0xff86a1c8) // 18/7
// ALT: NHSTUB(GetDrive_FreeClusters, 0xff86a1c8) // 18/7
// ALT: NHSTUB(GetDrive_FreeClusters, 0xff86a204) // 18/7
// ALT: NHSTUB(GetDrive_FreeClusters, 0xff86a204) // 18/7
// Best match: 80%
//NHSTUB(GetDrive_TotalClusters, 0xff86a204) -- stubs_entry_2.S = 0xff86a18c
// Best match: 51%
//NHSTUB(GetFocusLensSubjectDistance, 0xffa55f3c) -- stubs_entry_2.S = 0xffa64c48
// ALT: NHSTUB(GetFocusLensSubjectDistance, 0xffa55f3c) // 16/15
// Best match: 88%
NHSTUB(GetFocusLensSubjectDistanceFromLens, 0xffa651c8)
// Best match: 55%
//NHSTUB(GetOpticalTemperature, 0xffa65f28) -- stubs_entry_2.S = 0xffa4da00
// Best match: 86%
NHSTUB(GetParameterData, 0xff96b7c4)
// Best match: 71%
//NHSTUB(GetPropertyCase, 0xff825ca0) -- stubs_entry_2.S = 0xff825ca4
// Best match: 96%
NHSTUB(GetSystemTime, 0xff814248)
// ALT: NHSTUB(GetSystemTime, 0xff814248) // 26/1
// Best match: 72%
//NHSTUB(GetZoomLensCurrentPoint, 0xffa5c9dc) -- stubs_entry_2.S = 0xffa56f6c
// ALT: NHSTUB(GetZoomLensCurrentPoint, 0xffa5c9dc) // 21/8
// Best match: 55%
//NHSTUB(GetZoomLensCurrentPosition, 0xffa5c9f0) -- stubs_entry_2.S = 0xffa56f80
// ALT: NHSTUB(GetZoomLensCurrentPosition, 0xffa5c9f0) // 16/13
NHSTUB(IsStrobeChargeCompleted, 0xff9086f0)
// Best match: 96%
NHSTUB(LockMainPower, 0xff967984)
// ERROR: MakeAFScan is not found!
// Best match: 70%
NHSTUB(MakeDirectory, 0xff86ab80)
NHSTUB(MakeDirectory_Fut, 0xff86367c)
// ERROR: Mount_FileSystem is not found!
// Best match: 96%
NHSTUB(MoveFocusLensToDistance, 0xffa71588)
NHSTUB(MoveZoomLensWithPoint, 0xffa56de8)
// ALT: NHSTUB(MoveZoomLensWithPoint, 0xffa56de8) // 25/0
// ERROR: Open is not found!
//NHSTUB(PT_PlaySound, 0xff960948) -- stubs_entry_2.S = 0xff960080
// ERROR: PhySw_testgpio is not found!
NHSTUB(PostLogicalEventForNotPowerType, 0xff964d10)
NHSTUB(PostLogicalEventToUI, 0xff964d9c)
// ALT: NHSTUB(PostLogicalEventToUI, 0xff964e34) // 25/0
NHSTUB(ProtectFile, 0xff862d5c)
// Best match: 92%
NHSTUB(PutInNdFilter, 0xffa6f3c4)
// ALT: NHSTUB(PutInNdFilter, 0xffa6f3c4) // 25/2
// ALT: NHSTUB(PutInNdFilter, 0xffa70ef8) // 25/2
// ALT: NHSTUB(PutInNdFilter, 0xffa70ef8) // 25/2
// ALT: NHSTUB(PutInNdFilter, 0xffa70f40) // 25/2
// ALT: NHSTUB(PutInNdFilter, 0xffa70f40) // 25/2
// Best match: 94%
NHSTUB(PutOutNdFilter, 0xffa6f40c)
// ALT: NHSTUB(PutOutNdFilter, 0xffa6f40c) // 16/1
// ERROR: Read is not found!
NHSTUB(RefreshPhysicalScreen, 0xff97b578)
// Best match: 52%
//NHSTUB(Remove, 0xff8c70c4) -- stubs_entry_2.S = 0xff86a950
NHSTUB(RenameFile_Fut, 0xff863570)
// Best match: 84%
//NHSTUB(Restart, 0xff82339c) -- stubs_entry_2.S = 0xff8233a0
// Best match: 95%
NHSTUB(SetAE_ShutterSpeed, 0xffa738ec)
// Best match: 96%
NHSTUB(SetAutoShutdownTime, 0xff96787c)
// Best match: 73%
NHSTUB(SetCurrentCaptureModeType, 0xff98fe2c)
// Best match: 58%
NHSTUB(SetFileAttributes, 0xff86aa9c)
// Best match: 87%
NHSTUB(SetLogicalEventActive, 0xff96622c)
// Best match: 86%
NHSTUB(SetParameterData, 0xff96b6e4)
// ERROR: SetPropertyCase is not found!
NHSTUB(SleepTask, 0xff821870)
// ALT: NHSTUB(SleepTask, 0xff821924) // 31/0
NHSTUB(TakeSemaphore, 0xff8211e0)
NHSTUB(TurnOffBackLight, 0xff9a3614)
NHSTUB(TurnOnBackLight, 0xff9a35e8)
// Best match: 71%
//NHSTUB(UnlockAF, 0xff94f244) -- stubs_entry_2.S = 0xff94eff4
// Best match: 96%
NHSTUB(UnlockMainPower, 0xff967a38)
NHSTUB(Unmount_FileSystem, 0xff869d34)
// ERROR: UnsetZoomForMovie is not found!
// Best match: 96%
NHSTUB(UpdateMBROnFlash, 0xff869e8c)
// ERROR: VbattGet is not found!
// ERROR: Write is not found!
// ERROR: WriteSDCard is not found!
NHSTUB(_log, 0xffaa615c)
// ALT: NHSTUB(_log, 0xffaa615c) // 27/0
NHSTUB(_log10, 0xffaa6804)
// ALT: NHSTUB(_log10, 0xffaa6804) // 27/0
NHSTUB(_pow, 0xffaa6cf4)
// ALT: NHSTUB(_pow, 0xffaa6cf4) // 25/0
NHSTUB(_sqrt, 0xffaab040)
// ALT: NHSTUB(_sqrt, 0xffaab040) // 24/0
// Best match: 96%
NHSTUB(add_ptp_handler, 0xffa1918c)
NHSTUB(apex2us, 0xff8adbe8)
NHSTUB(chdir, 0xffaba29c)
// ALT: NHSTUB(chdir, 0xffaba29c) // 27/0
NHSTUB(close, 0xffab9bdc)
NHSTUB(closedir, 0xffab5b7c)
NHSTUB(errnoOfTaskGet, 0xffab6348)
// Best match: 92%
NHSTUB(exmem_alloc, 0xff812954)
// ERROR: free is not found!
NHSTUB(ints_disable, 0xff81d8c8)
NHSTUB(ints_enable, 0xff81d8d4)
NHSTUB(ioctl, 0xffab9d1c)
NHSTUB(iosDevAdd, 0xffabadfc)
NHSTUB(iosDevDelete, 0xffabadd4)
NHSTUB(iosDevFind, 0xffabad88)
NHSTUB(iosDrvInstall, 0xffabb0c0)
NHSTUB(isalpha, 0xffaafaf0)
NHSTUB(isdigit, 0xffaafb20)
NHSTUB(islower, 0xffaafb50)
NHSTUB(ispunct, 0xffaafb80)
NHSTUB(isspace, 0xffaafb98)
NHSTUB(isupper, 0xffaafbb0)
NHSTUB(isxdigit, 0xffaafbc8)
// ERROR: kbd_p1_f is not found!
// ERROR: kbd_p1_f_cont is not found!
// ERROR: kbd_p2_f is not found!
// Best match: 83%
NHSTUB(kbd_pwr_off, 0xffa476ac)
// ALT: NHSTUB(kbd_pwr_off, 0xffa476c8) // 5/1
// ALT: NHSTUB(kbd_pwr_off, 0xffa47798) // 5/1
// ALT: NHSTUB(kbd_pwr_off, 0xffa477b4) // 5/1
// ALT: NHSTUB(kbd_pwr_off, 0xffa478fc) // 5/1
// ALT: NHSTUB(kbd_pwr_off, 0xffa47918) // 5/1
// Best match: 55%
NHSTUB(kbd_pwr_on, 0xffa5c468)
// ALT: NHSTUB(kbd_pwr_on, 0xffa5c494) // 5/4
// ERROR: kbd_read_keys_r2 is not found!
// Best match: 93%
NHSTUB(localtime, 0xffab4370)
NHSTUB(lseek, 0xffab9d20)
// Best match: 53%
NHSTUB(malloc, 0xffabcc1c)
// ALT: NHSTUB(malloc, 0xffabcc1c) // 15/13
NHSTUB(memPartInfoGet, 0xffabd03c)
NHSTUB(memchr, 0xffab371c)
NHSTUB(memcmp, 0xffab3750)
// ALT: NHSTUB(memcmp, 0xffac1b38) // 9/0
// ALT: NHSTUB(memcmp, 0xffbd126c) // 9/0
NHSTUB(memcpy, 0xffab378c)
NHSTUB(memset, 0xffab3804)
// Best match: 61%
NHSTUB(mkdir, 0xff86aacc)
// ALT: NHSTUB(mkdir, 0xff86ab8c) // 19/12
NHSTUB(mktime, 0xffab4538)
NHSTUB(open, 0xffaba220)
NHSTUB(opendir, 0xffab5bb0)
NHSTUB(qsort, 0xffab2fb0)
NHSTUB(rand, 0xffab2fd4)
// ALT: NHSTUB(rand, 0xffab2fd4) // 8/0
NHSTUB(read, 0xffab9c3c)
NHSTUB(readdir, 0xffab5b48)
NHSTUB(rename, 0xffaba228)
// ALT: NHSTUB(rename, 0xffaba228) // 26/0
NHSTUB(rewinddir, 0xffab5b70)
NHSTUB(srand, 0xffab2ff8)
// ALT: NHSTUB(srand, 0xffab2ff8) // 4/0
NHSTUB(stat, 0xffab5c44)
NHSTUB(strcat, 0xffab3824)
NHSTUB(strchr, 0xffab3850)
NHSTUB(strcmp, 0xffab3874)
NHSTUB(strcpy, 0xffab3a08)
NHSTUB(strftime, 0xffab5090)
NHSTUB(strlen, 0xffab3b6c)
NHSTUB(strncmp, 0xffab3bd0)
NHSTUB(strncpy, 0xffab3c14)
// ALT: NHSTUB(strncpy, 0xffab3c14) // 24/0
NHSTUB(strpbrk, 0xffab3c5c)
NHSTUB(strrchr, 0xffab3c98)
// ALT: NHSTUB(strrchr, 0xffab3c98) // 8/0
NHSTUB(strtol, 0xffab33ec)
NHSTUB(strtoul, 0xffab3594)
NHSTUB(taskCreateHookAdd, 0xffac029c)
NHSTUB(taskDeleteHookAdd, 0xffac01d8)
// Best match: 82%
NHSTUB(taskIdListGet, 0xffac7d80)
NHSTUB(taskLock, 0xffac843c)
NHSTUB(taskName, 0xffac7c78)
NHSTUB(taskResume, 0xffac805c)
NHSTUB(taskSuspend, 0xffac7e88)
NHSTUB(taskUnlock, 0xffac84e4)
NHSTUB(time, 0xffab50bc)
// ALT: NHSTUB(time, 0xffab50bc) // 25/0
NHSTUB(tolower, 0xffaafbe0)
NHSTUB(toupper, 0xffaafbf0)
NHSTUB(utime, 0xffab5cd8)
// ALT: NHSTUB(utime, 0xffab5cd8) // 26/0
NHSTUB(vsprintf, 0xffab749c)
NHSTUB(write, 0xffab9cac)
