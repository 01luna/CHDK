// !!! THIS FILE IS GENERATED. DO NOT EDIT. !!!
#include "stubs_asm.h"

// Camera info:
//   DRYOS R52 (DRYOS version 2.3, release #0052)
//   Firmware Ver GM1.00A   // Found @ 0xff88ebe0, "GM1.00A" @ 0xff88ebed
//   Firmware build timestamp: Feb 14 2013 09:06:14
//   Canon PowerShot A2500 

// Values for makefile.inc
//   PLATFORMOSVER = 52
//   PLATFORMID = 12913 (0x3271) // Found @ 0xfffe0040
//   MAXRAMADDR = 0x03ffffff
//   MEMISOSTART = 0x0015afe8
//   KEYSYS = d4d                // Found @ 0xffff1d30
//   NEED_ENCODED_DISKBOOT = 10   // Found @ 0xffff1d40

// Note, ROM copied to RAM :- from 0xffc57118, to 0x003f1000, len 15975 words.
//   ARAM_HEAP_START = 0x34e000  // Found @ 0xff981728
//   ARAM_HEAP_SIZE  = 0x22000   // Found @ 0xff9816ec

// Stubs below should be checked. Stub not matched 100%, or difference found to current 'stubs_entry_2.S'
//    Name                                     Address      Rule  %  Comp to stubs_entry_2.S
//NHSTUB(DeleteFile_Fut                       ,0xff82d058) //  1 90%        == 0xff82d058
// ERROR: MakeDirectory_Fut is not found.                  //--- ---    *** != 0xff82db68
// ERROR: RefreshPhysicalScreen is not found.              //--- ---    *** != 0x00000000

// Check of modemap from 'platform/CAMERA/shooting.c':
// Firmware modemap table found @ffa9d028 -> ffbef3b0
// No problems found with modemap table.

// Values below can be overridden in 'stubs_min.S':
DEF(physw_status                            ,0x00032764) // Found @0xff82af1c
DEF(physw_run                               ,0x00001c90) // Found @0xff82aa6c
DEF(physw_sleep_delay                       ,0x00001c98) // Found @0xff82aa6c
DEF(levent_table                            ,0xffb9c7dc) // Found @0xffb9c7dc
DEF(FlashParamsTable                        ,0xffbef5e0) // Found @0xffbef5e0
DEF(movie_status                            ,0x00006b5c) // Found @0xff972a18
DEF(video_compression_rate                  ,0x00006b8c) // Found @0xff97317c
DEF(full_screen_refresh                     ,0x0000759c) // Found @0xff98f280
DEF(canon_menu_active                       ,0x000038c0) // Found @0xff897220
DEF(canon_shoot_menu_active                 ,0x00008b65) // Found @0xff9e76d4
DEF(playrec_mode                            ,0x00003304) // Found @0xff884720
DEF(zoom_status                             ,0x0000a02c) // Found @0xffa39e48
// focus_len_table contains zoom focus lengths for use in 'get_focal_length' (main.c).
// each entry contains 2 int value(s), the first is the zoom focus length.
// there are 64 entries in the table - set NUM_FL to 64
DEF(focus_len_table                         ,0xfffea3e0) // Found @0xfffea3e0
DEF(zoom_busy                               ,0x00006a64) // Found @0xff96f054
DEF(focus_busy                              ,0x00006930) // Found @0xff96baf0
DEF(recreview_hold                          ,0x00002718) // Found @0xff859f48
// Palette colour tables  found @ 0xffba3418
DEF(active_palette_buffer                   ,0x000075a4) // Found @0xff98f204
DEF(palette_buffer_ptr                      ,0x000075a8) // Found @0xff98f594
// Offset from start of palette_buffer to color data = 4 (Found @0xffabdacc)
// Camera appears to have only 1 RAW buffer @ 0x420e5c30 (Found @0xffb18918)
DEF(fileio_semaphore                        ,0x00003064) // Found @0xff8756c4

// Values below go in 'lib.c':
//void *vid_get_bitmap_fb()        { return (void*)0x40431000; }             // Found @0xff85cf34
//void *vid_get_viewport_fb()      { return (void*)0x40586b80; }             // Found @0xffb17000
DEF(viewport_fb_d                           ,0x00003110) // Found 0x30bc (@0xff878d44) + 0x54 (@0xff878d7c)
//void *vid_get_viewport_fb_d()    { return (void*)(*(int*)(0x30bc+0x54)); } // Found @0xff878d44 & 0xff878d7c
DEF(jpeg_count_str                          ,0x000c86fc) // Found @0xff9d5fc0
//char *camera_jpeg_count_str()    { return (char*)0x000c86fc; }             // Found @0xff9d5fc0
//long hook_raw_size()             { return 0x01794300; }                    // Found @0xffb18970
//int get_flash_params_count(void) { return 0x91; }                          // Found @0xff9872c4

// Bitmap masks and physw_status index values for SD_READONLY and USB power flags (for kbd.c).
//#define SD_READONLY_FLAG    0x02000000 // Found @0xffb491cc, levent 0x20a
//#define SD_READONLY_IDX     2
//#define USB_MASK            0x10000000 // Found @0xffb491dc, levent 0x202
//#define USB_IDX             2
//#define BATTCOVER_FLAG      0x04000000 // Found @0xffb491d4, levent 0x205
//#define BATTCOVER_IDX       2

// Keymap values for kbd.c. Additional keys may be present, only common values included here.
//static KeyMap keymap[] = {
//    { 2, KEY_POWER           ,0x00000001 }, // Found @0xffb4913c, levent 0x100
//    { 2, KEY_PLAYBACK        ,0x00000002 }, // Found @0xffb49144, levent 0x101
//    { 2, KEY_SHOOT_FULL      ,0x0000000c }, // Found @0xffb49154, levent 0x01
//    { 2, KEY_SHOOT_FULL_ONLY ,0x00000008 }, // Found @0xffb49154, levent 0x01
//    { 2, KEY_SHOOT_HALF      ,0x00000004 }, // Found @0xffb4914c, levent 0x00
//    { 2, KEY_ZOOM_OUT        ,0x00000010 }, // Found @0xffb4915c, levent 0x03
//    { 2, KEY_UP              ,0x00000040 }, // Found @0xffb49164, levent 0x04
//    { 2, KEY_LEFT            ,0x00000080 }, // Found @0xffb4916c, levent 0x06
//    { 2, KEY_RIGHT           ,0x00000100 }, // Found @0xffb49174, levent 0x07
//    { 2, KEY_MENU            ,0x00000200 }, // Found @0xffb4917c, levent 0x09
//    { 2, KEY_SET             ,0x00000400 }, // Found @0xffb49184, levent 0x08
//    { 2, KEY_DISPLAY         ,0x00001000 }, // Found @0xffb4918c, levent 0x0a
//    { 2, KEY_ZOOM_IN         ,0x00004000 }, // Found @0xffb4919c, levent 0x02
//    { 0, 0, 0 }
//};

// Values below go in 'platform_camera.h':
//#define CAM_DRYOS         1
//#define CAM_DRYOS_2_3_R39 1 // Defined for cameras with DryOS version R39 or higher
//#define CAM_DRYOS_2_3_R47 1 // Defined for cameras with DryOS version R47 or higher
//#define CAM_RAW_ROWPIX    4704 // Found @0xff945828
//#define CAM_RAW_ROWS      3504 // Found @0xff945834
//#undef  CAM_UNCACHED_BIT
//#define CAM_UNCACHED_BIT  0x40000000 // Found @0xff83200c
//#define CAM_DATE_FOLDER_NAMING 0x080 // Found @0xffa693dc (pass as 3rd param to GetImageFolder)
//#define PARAM_CAMERA_NAME 3 // Found @0xffbee8a4

// Misc stuff
DEF(ctypes, 0xffb48634)

// LED table init @ 0xff92608c
// LED #1: 0xc0223030, offset 0x104
// LED #2: 0xc0220094, offset 0x4

// For capt_seq.c
DEF(_nrflag,0x9870) // Found @ ff9f635c (0x9870) & ff9f6398 (+0x00)
//static long *nrflag = (long*)(0x9870+0x00);  // Found @ ff9f635c & ff9f6398
//#define NR_AUTO (0)                          // have to explictly reset value back to 0 to enable auto

// Stubs below matched 100%.
//    Name                                     Address                Comp to stubs_entry_2.S
NHSTUB(AllocateUncacheableMemory              ,0xff831fc4) //112
NHSTUB(Close                                  ,0xff82d6cc) //120
NHSTUB(CreateTask                             ,0x003f68b0) //120
NHSTUB(DebugAssert                            ,0x003f6c28) //107
NHSTUB(DeleteDirectory_Fut                    ,0xff82d0cc) //116
NHSTUB(DoAELock                               ,0xff82f198) //120
NHSTUB(DoAFLock                               ,0xff82eeb8) //120
NHSTUB(EnterToCompensationEVF                 ,0xff82f100) //104
NHSTUB(ExecuteEventProcedure                  ,0xff88bc40) //104
NHSTUB(ExitFromCompensationEVF                ,0xff82f144) //104
NHSTUB(ExitTask                               ,0x003f6b40) //120
NHSTUB(ExpCtrlTool_StartContiAE               ,0xff83e914) //104
NHSTUB(ExpCtrlTool_StopContiAE                ,0xff83ea7c) //104
NHSTUB(Fclose_Fut                             ,0xff82d164) //120
NHSTUB(Feof_Fut                               ,0xff82d350) //  1
NHSTUB(Fflush_Fut                             ,0xff82d38c) //  1
NHSTUB(Fgets_Fut                              ,0xff82d2b8) //  6
NHSTUB(Fopen_Fut                              ,0xff82d124) //120
NHSTUB(Fread_Fut                              ,0xff82d210) //120
NHSTUB(FreeUncacheableMemory                  ,0xff832004) //112
NHSTUB(Fseek_Fut                              ,0xff82d304) //120
NHSTUB(Fwrite_Fut                             ,0xff82d264) //120
NHSTUB(GetBatteryTemperature                  ,0xff864ea8) //102
NHSTUB(GetCCDTemperature                      ,0xff864e34) //102
NHSTUB(GetCurrentAvValue                      ,0xff96d954) //120
NHSTUB(GetDrive_ClusterSize                   ,0xff876d34) //122
NHSTUB(GetDrive_FreeClusters                  ,0xff877548) //119
NHSTUB(GetDrive_TotalClusters                 ,0xff877520) //122
NHSTUB(GetFocusLensSubjectDistance            ,0xff96cc20) //102
NHSTUB(GetFocusLensSubjectDistanceFromLens    ,0xff96cfb4) //  3
NHSTUB(GetImageFolder                         ,0xff94cf54) //122
NHSTUB(GetKbdState                            ,0xff862054) //109
NHSTUB(GetMemInfo                             ,0xff814fcc) //115
NHSTUB(GetOpticalTemperature                  ,0xff864f1c) //120
NHSTUB(GetParameterData                       ,0xff987284) //101
NHSTUB(GetPropertyCase                        ,0xff88fff4) //101
NHSTUB(GetSystemTime                          ,0xffa9a120) //120
NHSTUB(GetVRAMHPixelsSize                     ,0xff84abe8) //120
NHSTUB(GetVRAMVPixelsSize                     ,0xff84abf4) //120
NHSTUB(GetZoomLensCurrentPoint                ,0xff96f4d0) //120
NHSTUB(GetZoomLensCurrentPosition             ,0xffa8acc8) //102
NHSTUB(GiveSemaphore                          ,0x003f7904) //120
NHSTUB(IsStrobeChargeCompleted                ,0xff8d64d0) //102
NHSTUB(LEDDrive                               ,0xff974708) //120
NHSTUB(LocalTime                              ,0x003fb2e8) //115
NHSTUB(LockMainPower                          ,0xff892468) //120
NHSTUB(MakeSDCardBootable                     ,0xff8779cc) //105
NHSTUB(MoveFocusLensToDistance                ,0xffb12b68) //102
NHSTUB(MoveIrisWithAv                         ,0xffa9568c) //120
NHSTUB(MoveZoomLensWithPoint                  ,0xffa95dbc) //120
NHSTUB(Open                                   ,0xff82d604) //120
NHSTUB(PB2Rec                                 ,0xff852fec) //104
NHSTUB(PT_MoveDigitalZoomToWide               ,0xff97580c) //102
NHSTUB(PT_MoveOpticalZoomAt                   ,0xff9757dc) //102
NHSTUB(PT_PlaySound                           ,0xff89eba0) //122
NHSTUB(PostLogicalEventForNotPowerType        ,0xff891b58) //120
NHSTUB(PostLogicalEventToUI                   ,0xff891ba4) //120
NHSTUB(PutInNdFilter                          ,0xffa95b94) //102
NHSTUB(PutOutNdFilter                         ,0xffa95bb8) //102
NHSTUB(Read                                   ,0xff815a88) //120
NHSTUB(ReadFastDir                            ,0xffa79d04) //115
NHSTUB(Rec2PB                                 ,0xff85302c) //104
NHSTUB(RenameFile_Fut                         ,0xff82cfc4) //116
//NHSTUB(Restart                              ,0xff83146c) //122            == 0xff83146c
NHSTUB(ScreenLock                             ,0xff896d18) //117
NHSTUB(ScreenUnlock                           ,0xff896d6c) //117
NHSTUB(SetAE_ShutterSpeed                     ,0xffb15ed8) //102
NHSTUB(SetAutoShutdownTime                    ,0xff8924dc) //120
NHSTUB(SetCurrentCaptureModeType              ,0xff89cfa4) //120
NHSTUB(SetFileAttributes                      ,0xff82dad0) //  6
NHSTUB(SetFileTimeStamp                       ,0xff82da58) //  6
NHSTUB(SetLogicalEventActive                  ,0xff8921e0) //120
NHSTUB(SetParameterData                       ,0xff9871f0) //101
NHSTUB(SetPropertyCase                        ,0xff88fe64) //101
NHSTUB(SetScriptMode                          ,0xff892230) //120
NHSTUB(SleepTask                              ,0x003f7bb0) //120
NHSTUB(TakeSemaphore                          ,0x003f7834) //120
NHSTUB(TurnOffBackLight                       ,0xff89e46c) //104
NHSTUB(TurnOnBackLight                        ,0xff89e454) //104
NHSTUB(TurnOnDisplay                          ,0xff85d33c) //120
NHSTUB(TurnOffDisplay                         ,0xff85d34c) //120
NHSTUB(UIFS_WriteFirmInfoToFile               ,0xff9a29a0) //120
NHSTUB(UnlockAE                               ,0xff82f1bc) //120
NHSTUB(UnlockAF                               ,0xff82eee8) //120
NHSTUB(UnlockMainPower                        ,0xff8923bc) //120
NHSTUB(VbattGet                               ,0xff829cb0) //120
NHSTUB(Write                                  ,0xff82d720) //120
NHSTUB(WriteSDCard                            ,0xff95e764) //108
NHSTUB(_log                                   ,0x003fd0b0) //111
NHSTUB(_log10                                 ,0x003fd5f0) //112
NHSTUB(_pow                                   ,0x003fd768) //121
NHSTUB(_sqrt                                  ,0x003ff38c) //  6
NHSTUB(add_ptp_handler                        ,0xffa33764) //121
NHSTUB(apex2us                                ,0xff9ef428) //121
NHSTUB(close                                  ,0xff8158e4) //109
NHSTUB(err_init_task                          ,0xff8142ac) //111
NHSTUB(exmem_alloc                            ,0xff88a608) //101
NHSTUB(exmem_free                             ,0xff88a680) //101
NHSTUB(free                                   ,0xff812ea8) //112
NHSTUB(kbd_p1_f                               ,0xff82af6c) //109
NHSTUB(kbd_p1_f_cont                          ,0xff82af78) //109
NHSTUB(kbd_p2_f                               ,0xff82a704) //109
NHSTUB(kbd_read_keys                          ,0xff82af1c) //109
NHSTUB(kbd_read_keys_r2                       ,0xff861b64) //109
NHSTUB(lseek                                  ,0xff82d8e8) //120
NHSTUB(malloc                                 ,0xff812e50) //112
NHSTUB(memcmp                                 ,0xff81a938) //120
NHSTUB(memcpy                                 ,0xff832398) //120
NHSTUB(memset                                 ,0xff8a210c) //120
NHSTUB(mkdir                                  ,0xff82db68) //121
NHSTUB(mktime_ext                             ,0xff8a1914) //  1
NHSTUB(open                                   ,0xff815834) //109
NHSTUB(OpenFastDir                            ,0xffa79bb0) //115
NHSTUB(closedir                               ,0xffa79b60) //121
NHSTUB(qsort                                  ,0xffaeb840) //  6
NHSTUB(rand                                   ,0xffaeb314) //121
NHSTUB(realloc                                ,0xff9ecff8) //115
NHSTUB(reboot_fw_update                       ,0xffa99790) //106
NHSTUB(set_control_event                      ,0xff891ea0) //111
NHSTUB(srand                                  ,0xffaeb308) //122
NHSTUB(stat                                   ,0xff82d930) //109
NHSTUB(strcat                                 ,0xff8a1f94) //  1
NHSTUB(strchr                                 ,0xff812d1c) //  1
NHSTUB(strcmp                                 ,0xff81aa34) //120
NHSTUB(strcpy                                 ,0xff81a920) //120
NHSTUB(strftime                               ,0xff8a1960) //113
NHSTUB(strlen                                 ,0xff812d68) //120
NHSTUB(strncmp                                ,0xff812cd0) //  1
NHSTUB(strncpy                                ,0xff812c94) //  1
NHSTUB(strrchr                                ,0xff812d40) //  1
NHSTUB(strtol                                 ,0xff832384) //101
NHSTUB(strtolx                                ,0xff832188) //109
   DEF(task_CaptSeq                           ,0xff87f1f4) //120
   DEF(task_ExpDrv                            ,0xff8bbb70) //120
   DEF(task_FileWrite                         ,0xffa75e64) //120
   DEF(task_InitFileModules                   ,0xff853908) //120
   DEF(task_MovieRecord                       ,0xff973650) //120
   DEF(task_PhySw                             ,0xff82aa68) //120
   DEF(hook_CreateTask                        ,0x003f68b0) //105
NHSTUB(time                                   ,0x003fb790) //119
NHSTUB(vsprintf                               ,0xff81a7d0) //115
NHSTUB(EngDrvRead                             ,0xff82bdac) //102
NHSTUB(CancelHPTimer                          ,0xff88b328) //119
NHSTUB(SetHPTimerAfterNow                     ,0xff88b220) //119
NHSTUB(SS_MFOn                                ,0xff9758a0) //120
NHSTUB(SS_MFOff                               ,0xff9758b0) //120
NHSTUB(GetAdChValue                           ,0xff85e4a4) //120
