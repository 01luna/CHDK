// !!! THIS FILE IS GENERATED. DO NOT EDIT. !!!
#include "stubs_asm.h"

NHSTUB(AllocateMemory, 0xff811ac4)
NHSTUB(AllocateUncacheableMemory, 0xff814cb0)
NHSTUB(Close, 0xff86f5a8)
NHSTUB(CreatePhysicalVram, 0xff935154)
NHSTUB(CreateTask, 0xff821620)
NHSTUB(CreateTaskStrict, 0xff8226c0)
NHSTUB(DeleteFile_Fut, 0xff868748)
NHSTUB(DisableDispatch, 0xff821444)
// Best match: 96%
NHSTUB(DisplayImagePhysicalScreen, 0xff934488)
// Best match: 56%
//NHSTUB(DoAFLock, 0xff95b41c) -- stubs_entry_2.S = 0xff95b424
NHSTUB(EnableDispatch, 0xff8214d0)
// ERROR: EnterToCompensationEVF is not found!
NHSTUB(ExecuteEventProcedure, 0xff816bc8)
// Best match: 73%
//NHSTUB(ExitFromCompensationEVF, 0xff95d540) -- stubs_entry_2.S = 0x00000000
NHSTUB(ExitTask, 0xff8219e0)
NHSTUB(Fclose_Fut, 0xff868888)
NHSTUB(Feof_Fut, 0xff868a9c)
NHSTUB(Fflush_Fut, 0xff868ad4)
NHSTUB(Fgets_Fut, 0xff868a0c)
NHSTUB(Fopen_Fut, 0xff86884c)
NHSTUB(Fread_Fut, 0xff86896c)
NHSTUB(FreeMemory, 0xff811ad0)
NHSTUB(FreeUncacheableMemory, 0xff814ce4)
NHSTUB(Fseek_Fut, 0xff868a54)
NHSTUB(Fwrite_Fut, 0xff8689bc)
// Best match: 85%
NHSTUB(GetBatteryTemperature, 0xff82d21c)
// Best match: 86%
NHSTUB(GetCCDTemperature, 0xff82d208)
//NHSTUB(GetCurrentAvValue, 0xffac6190) -- stubs_entry_2.S = 0xffac4014
NHSTUB(GetCurrentTargetDistance, 0xffac6138)
// Best match: 76%
//NHSTUB(GetDrive_ClusterSize, 0xff86edd0) -- stubs_entry_2.S = 0xff86ed94
// Best match: 80%
//NHSTUB(GetDrive_FreeClusters, 0xff86edd0) -- stubs_entry_2.S = 0xff86ee0c
// Best match: 84%
//NHSTUB(GetDrive_TotalClusters, 0xff86ed94) -- stubs_entry_2.S = 0xff86edd0
// Best match: 54%
NHSTUB(GetFocusLensSubjectDistance, 0xffab4f48)
// ALT: NHSTUB(GetFocusLensSubjectDistance, 0xffab4f48) // 17/14
// Best match: 92%
NHSTUB(GetFocusLensSubjectDistanceFromLens, 0xffab54e4)
// Best match: 86%
NHSTUB(GetOpticalTemperature, 0xff82d1f4)
// Best match: 86%
NHSTUB(GetParameterData, 0xff976f30)
NHSTUB(GetPropertyCase, 0xff8248e4)
// Best match: 96%
NHSTUB(GetSystemTime, 0xff814ee8)
// ALT: NHSTUB(GetSystemTime, 0xff814ee8) // 26/1
// Best match: 93%
NHSTUB(GetZoomLensCurrentPoint, 0xffaa5f10)
// ALT: NHSTUB(GetZoomLensCurrentPoint, 0xffaa5f10) // 27/2
// Best match: 93%
NHSTUB(GetZoomLensCurrentPosition, 0xffaa5f24)
// ALT: NHSTUB(GetZoomLensCurrentPosition, 0xffaa5f24) // 27/2
NHSTUB(IsStrobeChargeCompleted, 0xff91047c)
NHSTUB(LockMainPower, 0xff972104)
// ERROR: MakeAFScan is not found!
NHSTUB(MakeDirectory, 0xff86f84c)
NHSTUB(MakeDirectory_Fut, 0xff8687d4)
// Best match: 90%
NHSTUB(Mount_FileSystem, 0xff86e8d8)
// ALT: NHSTUB(Mount_FileSystem, 0xff86e8d8) // 27/3
// Best match: 96%
NHSTUB(MoveFocusLensToDistance, 0xffac63d8)
NHSTUB(MoveZoomLensWithPoint, 0xffaa5df0)
// ALT: NHSTUB(MoveZoomLensWithPoint, 0xffaa5df0) // 25/0
NHSTUB(Open, 0xff86f580)
NHSTUB(PT_PlaySound, 0xff969544)
// Best match: 89%
NHSTUB(PhySw_testgpio, 0xff827f98)
NHSTUB(PostLogicalEventForNotPowerType, 0xff96e034)
NHSTUB(PostLogicalEventToUI, 0xff96e0b0)
// ALT: NHSTUB(PostLogicalEventToUI, 0xff96e138) // 21/0
NHSTUB(ProtectFile, 0xff867eb4)
// Best match: 92%
NHSTUB(PutInNdFilter, 0xffac4198)
// ALT: NHSTUB(PutInNdFilter, 0xffac4198) // 25/2
// ALT: NHSTUB(PutInNdFilter, 0xffac5d38) // 25/2
// ALT: NHSTUB(PutInNdFilter, 0xffac5d38) // 25/2
// ALT: NHSTUB(PutInNdFilter, 0xffac5d80) // 25/2
// ALT: NHSTUB(PutInNdFilter, 0xffac5d80) // 25/2
// Best match: 94%
NHSTUB(PutOutNdFilter, 0xffac41e0)
// ALT: NHSTUB(PutOutNdFilter, 0xffac41e0) // 16/1
NHSTUB(Read, 0xff86f63c)
NHSTUB(RefreshPhysicalScreen, 0xff988ef0)
NHSTUB(Remove, 0xff86f5c8)
NHSTUB(RenameFile_Fut, 0xff8686c8)
NHSTUB(Restart, 0xff822b38)
// Best match: 95%
NHSTUB(SetAE_ShutterSpeed, 0xffac9c80)
NHSTUB(SetAutoShutdownTime, 0xff972008)
NHSTUB(SetCurrentCaptureModeType, 0xff9a3278)
NHSTUB(SetFileAttributes, 0xff86f760)
// Best match: 88%
NHSTUB(SetLogicalEventActive, 0xff96fdfc)
// Best match: 86%
NHSTUB(SetParameterData, 0xff976e50)
NHSTUB(SetPropertyCase, 0xff8247c8)
NHSTUB(SleepTask, 0xff821534)
NHSTUB(TakeSemaphore, 0xff821030)
NHSTUB(TurnOffBackLight, 0xff9bb0b0)
NHSTUB(TurnOnBackLight, 0xff9bb080)
// Best match: 78%
//NHSTUB(UnlockAF, 0xff903a5c) -- stubs_entry_2.S = 0xff95b468
// ALT: NHSTUB(UnlockAF, 0xff95b46c) // 11/3
NHSTUB(UnlockMainPower, 0xff97219c)
NHSTUB(Unmount_FileSystem, 0xff86e97c)
// Best match: 89%
NHSTUB(UnsetZoomForMovie, 0xff9ae170)
NHSTUB(UpdateMBROnFlash, 0xff86eacc)
// ERROR: VbattGet is not found!
NHSTUB(Write, 0xff86f648)
// Best match: 64%
NHSTUB(WriteSDCard, 0xff87dfd0)
NHSTUB(_log, 0xffb01b2c)
// ALT: NHSTUB(_log, 0xffb01b2c) // 27/0
NHSTUB(_log10, 0xffafdecc)
// ALT: NHSTUB(_log10, 0xffafdecc) // 27/0
NHSTUB(_pow, 0xffafe054)
// ALT: NHSTUB(_pow, 0xffafe054) // 25/0
NHSTUB(_sqrt, 0xffafff28)
// ALT: NHSTUB(_sqrt, 0xffafff28) // 24/0
// Best match: 96%
NHSTUB(add_ptp_handler, 0xffa74c78)
NHSTUB(apex2us, 0xff8b1db4)
NHSTUB(chdir, 0xffb0c650)
// ALT: NHSTUB(chdir, 0xffb0c650) // 27/0
NHSTUB(close, 0xffb0bf90)
NHSTUB(closedir, 0xffb09418)
NHSTUB(errnoOfTaskGet, 0xffb09be4)
// Best match: 93%
NHSTUB(exmem_alloc, 0xff81282c)
// ERROR: free is not found!
NHSTUB(ints_disable, 0xff81daa0)
NHSTUB(ints_enable, 0xff81daac)
NHSTUB(ioctl, 0xffb0c0d0)
NHSTUB(iosDevAdd, 0xffb0d1b0)
NHSTUB(iosDevDelete, 0xffb0d188)
NHSTUB(iosDevFind, 0xffb0d13c)
NHSTUB(iosDrvInstall, 0xffb0d474)
NHSTUB(isalpha, 0xffb034bc)
NHSTUB(isdigit, 0xffb034ec)
NHSTUB(islower, 0xffb0351c)
NHSTUB(ispunct, 0xffb0354c)
NHSTUB(isspace, 0xffb03564)
NHSTUB(isupper, 0xffb0357c)
NHSTUB(isxdigit, 0xffb03594)
NHSTUB(kbd_p1_f, 0xff826cf4)
NHSTUB(kbd_p1_f_cont, 0xff826d00)
NHSTUB(kbd_p2_f, 0xff8270d8)
// Best match: 83%
//NHSTUB(kbd_pwr_off, 0xff827f54) -- stubs_entry_2.S = 0xff827f0c
// ALT: NHSTUB(kbd_pwr_off, 0xff827f54) // 5/1
// ALT: NHSTUB(kbd_pwr_off, 0xff827f70) // 5/1
// ALT: NHSTUB(kbd_pwr_off, 0xff827f70) // 5/1
// ALT: NHSTUB(kbd_pwr_off, 0xff828e60) // 5/1
// ALT: NHSTUB(kbd_pwr_off, 0xff828e7c) // 5/1
// ALT: NHSTUB(kbd_pwr_off, 0xff828f68) // 5/1
// ALT: NHSTUB(kbd_pwr_off, 0xff828f84) // 5/1
// ALT: NHSTUB(kbd_pwr_off, 0xff829054) // 5/1
// ALT: NHSTUB(kbd_pwr_off, 0xff829070) // 5/1
// ALT: NHSTUB(kbd_pwr_off, 0xff8291b8) // 5/1
// ALT: NHSTUB(kbd_pwr_off, 0xff8291d4) // 5/1
// ERROR: kbd_pwr_on is not found!
NHSTUB(kbd_read_keys_r2, 0xff827a40)
// Best match: 93%
NHSTUB(localtime, 0xffb07c0c)
NHSTUB(lseek, 0xffb0c0d4)
// Best match: 53%
NHSTUB(malloc, 0xffb0efd0)
// ALT: NHSTUB(malloc, 0xffb0efd0) // 15/13
NHSTUB(memPartInfoGet, 0xffb0f3f0)
NHSTUB(memchr, 0xffb06fb8)
NHSTUB(memcmp, 0xffb06fec)
// ALT: NHSTUB(memcmp, 0xffb13bb0) // 9/0
NHSTUB(memcpy, 0xffb07028)
NHSTUB(memset, 0xffb070a0)
NHSTUB(mkdir, 0xff86f790)
NHSTUB(mktime, 0xffb07dd4)
NHSTUB(open, 0xffb0c5d4)
NHSTUB(opendir, 0xffb0944c)
NHSTUB(qsort, 0xffb0684c)
NHSTUB(rand, 0xffb06870)
// ALT: NHSTUB(rand, 0xffb06870) // 8/0
NHSTUB(read, 0xffb0bff0)
NHSTUB(readdir, 0xffb093e4)
NHSTUB(rename, 0xffb0c5dc)
// ALT: NHSTUB(rename, 0xffb0c5dc) // 26/0
NHSTUB(rewinddir, 0xffb0940c)
NHSTUB(srand, 0xffb06894)
// ALT: NHSTUB(srand, 0xffb06894) // 4/0
NHSTUB(stat, 0xffb094e0)
NHSTUB(strcat, 0xffb070c0)
NHSTUB(strchr, 0xffb070ec)
NHSTUB(strcmp, 0xffb07110)
NHSTUB(strcpy, 0xffb072a4)
NHSTUB(strftime, 0xffb0892c)
NHSTUB(strlen, 0xffb07408)
NHSTUB(strncmp, 0xffb0746c)
NHSTUB(strncpy, 0xffb074b0)
// ALT: NHSTUB(strncpy, 0xffb074b0) // 24/0
NHSTUB(strpbrk, 0xffb074f8)
NHSTUB(strrchr, 0xffb07534)
// ALT: NHSTUB(strrchr, 0xffb07534) // 8/0
NHSTUB(strtol, 0xffb06c88)
NHSTUB(strtoul, 0xffb06e30)
NHSTUB(taskCreateHookAdd, 0xffb12650)
NHSTUB(taskDeleteHookAdd, 0xffb1258c)
// Best match: 82%
NHSTUB(taskIdListGet, 0xffb1c618)
NHSTUB(taskLock, 0xffb1ccd4)
NHSTUB(taskName, 0xffb1c510)
NHSTUB(taskResume, 0xffb1c8f4)
NHSTUB(taskSuspend, 0xffb1c720)
NHSTUB(taskUnlock, 0xffb1cd7c)
NHSTUB(time, 0xffb08958)
// ALT: NHSTUB(time, 0xffb08958) // 25/0
NHSTUB(tolower, 0xffb035ac)
NHSTUB(toupper, 0xffb035bc)
NHSTUB(utime, 0xffb09574)
// ALT: NHSTUB(utime, 0xffb09574) // 26/0
NHSTUB(vsprintf, 0xffb0ad38)
NHSTUB(write, 0xffb0c060)
