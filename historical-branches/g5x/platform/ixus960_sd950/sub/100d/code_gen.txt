//-------------------------- BOOT.C ---------------------------------------------------------------

FILE boot.c

>>> file=../boot_hdr.c

>>>

void my_touchw_task(void);

void taskCreateHook(int *p) {
    p-=16;
    if (p[0]==0xff85c038)  p[0]=(int)capt_seq_task;
    if (p[0]==0xff8af7b0)  p[0]=(int)exp_drv_task;
    if (p[0]==0xff8584ec)  p[0]=(int)movie_record_task;
    if (p[0]==0xffa082a4)  p[0]=(int)filewritetask;
    if (p[0]==0xff871070)  p[0]=(int)init_file_modules_task;
    if (p[0]==0xff8e85f8)  p[0]=(int)my_touchw_task;
}

void boot()
{
    long *canon_data_src = (void*)0xFFAFB86C;
    long *canon_data_dst = (void*)0x1900;
    long canon_data_len = 0x137A8 - 0x1900; // data_end - data_start
    long *canon_bss_start = (void*)0x137A8; // just after data 
    long canon_bss_len = 0xA6234 - 0x137A8; 

    long i;


    // Enable CPU caches and MPU
    asm volatile (
    "MRC     p15, 0, R0,c1,c0\n"
    "ORR     R0, R0, #0x1000\n"
    "ORR     R0, R0, #4\n"
    "ORR     R0, R0, #1\n"
    "MCR     p15, 0, R0,c1,c0\n"
    :::"r0");

    for(i=0;i<canon_data_len/4;i++)
    canon_data_dst[i]=canon_data_src[i];

    for(i=0;i<canon_bss_len/4;i++)
    canon_bss_start[i]=0;

    // jump to init-sequence that follows the data-copy-routine
    asm volatile ("B      sub_FF8101A4_my\n");
};

<<<

//////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////
FUNC start=0xFF8101A4 length=27
>>>
    //http://chdk.setepontos.com/index.php/topic,4194.0.html
    *(int*)0x1930=(int)taskCreateHook;

    // replacement of sub_FF844050 for correct power-on.
    //(short press = playback mode, long press = record mode)
    *(int*)(0x23E8+0x4)= (*(int*)0xC0220078) & 1 ? 0x200000 : 0x400000;
    
<<<
ASM
FW 26
PATCHSUB ref=0
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 7
>>>

#if defined(CHDK_NOT_IN_CANON_HEAP) // use original heap offset if CHDK is loaded in high memory
<<<
FW
>>>
#else
"    LDR     R0, =new_sa\n"   // otherwise use patched value
"    LDR     R0, [R0]\n"      //
#endif

<<<
FW 27
PATCHSUB ref=0 name="uHwSetup_my"
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// uHwSetup_my
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW $-1
PATCHSUB ref=0 name=CreateTask_Startup_my
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// CreateTask_Startup_my
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 14
REM "Removed for correct power-on"
FW 8
PATCHSUB ref=0 name=task_Startup_my
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// task_Startup_my
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 6
REM "load DISKBOOT.BIN"
>>>
"    BL      CreateTask_spytask\n" // added
<<<
FW 4
PATCHSUB ref=1 name="taskcreatePhySw_my" comment="Checks buttons and acts accordingly"
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// taskcreatePhySw_my
//////////////////////////////////////////////////////////////
FUNC ref=1
ASM
FW 7
PATCHSUB name=mykbd_task
PATCHVAL value=0x2000 comment="stack size for new task_PhySw so we don't have to do stack switch"
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// init_file_modules_task
//////////////////////////////////////////////////////////////
FUNC sig=task_InitFileModules name=init_file_modules_task
ASM
FW 7
PATCHSUB ref=0
>>>
"    BL      core_spytask_can_start\n"  // CHDK: Set "it's-safe-to-start" flag for spytask
<<<
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// init_file_modules_task -> ref=0
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 1
PATCHSUB ref=0
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// init_file_modules_task -> ref=0 -> ref=0
//////////////////////////////////////////////////////////////
FUNC ref=0 length=39
ASM
FW 16
PATCHSUB ref=0
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// init_file_modules_task -> ref=0 -> ref=0 -> ref=0
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 13
PATCHSUB ref=0
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// init_file_modules_task -> ref=0 -> ref=0 -> ref=0 -> ref=0
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 40
>>> file=../FAT32_detect.S
FW 7
REM
FW 12
REM           "Replaced, see below"
>>>
//mod start
"    LDRB    R12, [LR,#0x1FE]\n"           // New! First MBR signature byte (0x55)
"    LDRB    LR, [LR,#0x1FF]\n"            //      Last MBR signature byte (0xAA)
//mod end
<<<
FW $
ENDASM
ENDFUNC

FUNC start=0xFF8E85F8 name=my_touchw_task
ASM
FW 9
>>>
// loosely based on ixus860_sd870
"     BL      kbd_is_blocked\n"
"     MOV     R6, R0\n"
<<<
FW 2
>>>

// if not blocked, use original
"     CMP     R6, #0\n"
"     BEQ     bypass_skip_touch\n"

// if kbd is blocked, skip touch events
"     CMP     R0, #2\n"
"     CMPEQ   R1, #1\n"
"     BEQ     loc_FF8E8608\n"

"bypass_skip_touch:\n"

<<<
FW $
ENDASM
ENDFUNC

ENDFILE


//-------------------------- MOVIE_REC.C ----------------------------------------------------------

FILE movie_rec.c

>>> file=../movie_rec_hdr.c

//////////////////////////////////////////////////////////////
// movie_record_task
//////////////////////////////////////////////////////////////
FUNC sig=task_MovieRecord name=movie_record_task
ASM
FW 39
>>>
"    BL      unlock_optical_zoom\n"
<<<
FW 2
PATCHSUB ref=0
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// movie_record_task -> ref0
//////////////////////////////////////////////////////////////
FUNC ref=0 length=154
ASM
FW 131
PATCHSUB ref=1
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// movie_record_task -> ref0 -> ref1
//////////////////////////////////////////////////////////////
FUNC ref=1
ASM
FW 13
>>>
"    LDR     R7, =table\n"          // +
<<<
FW 18
PATCHVAL value=0x1A
PATCHVAL value=0x19
FW 18
PATCHSUB ref=0 name="CompressionRateTable"
FW 2
>>>
//mod start
"    LDR     R3, =video_mode\n"         // +
"    LDR     R3, [R3]\n"                // +
"    LDR     R3, [R3]\n"                // +
"    CMP     R3, #1\n"                  // +
"    LDREQ   R3, =video_quality\n"      // +
"    LDREQ   R3, [R3]\n"                // +
"    LDREQ   R2, [R3]\n"                // +
//mod end
<<<
FW 2
>>>
//"    BL      mute_on_zoom\n"            // +
<<<
FW 1
ENDASM
ENDFUNC

ENDFILE


//-------------------------- CAPT_SEQ.C -----------------------------------------------------------

FILE capt_seq.c

>>> file=../capt_seq_hdr.c

//////////////////////////////////////////////////////////////
// capt_seq_task
//////////////////////////////////////////////////////////////
FUNC sig=task_CaptSeq name=capt_seq_task
ASM
FW 46
>>>

// only do quick press hack if overrides are active
"    BL      captseq_hack_override_active\n" // returns 1 if tv or sv override in effect
"    STR     R0,[SP,#-4]!\n" // push return value
"    BL      shooting_expo_param_override\n"      // added

<<<
FW 1
>>>

"    LDR     R0, [SP], #4\n" // pop override hack
"    CMP     R0, #1\n"     // +
"    MOVEQ   R0, #0\n"     // +
"    STREQ   R0, [R6, #0x24]\n"  // fixes overrides behavior at short shutter press
"    LDRNE   R0, [R6, #0x24]\n" // modified NE
"    CMPNE   R0, #0\n"         // modified NE

<<<
REM "above patch makes these lines redundant"
REM
FW L67
PATCHSUB ref=0
FW 3
PATCHSUB ref=1
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// capt_seq_task -> ref=0
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 29
>>>
"    BL      wait_until_remote_button_is_released\n" // added
"    BL      capt_seq_hook_set_nr\n"                 // added
<<<
->FW
ENDASM
ENDFUNC


//////////////////////////////////////////////////////////////
// capt_seq_task -> ref=1
//////////////////////////////////////////////////////////////
FUNC ref=1 length=46
ASM
FW 29
PATCHSUB
FW 6
>>>
"    BL      capt_seq_hook_raw_here \n"         // added
<<<
FW $
ENDASM
ENDFUNC


//////////////////////////////////////////////////////////////
// exp_drv_task
//////////////////////////////////////////////////////////////
FUNC sig=task_ExpDrv name=exp_drv_task
ASM
FW 259
>>>
//SKIP DATA
<<<
SKIP 12
FW 15
PATCHSUB ref=0
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// exp_drv_task -> ref=0
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 47
PATCHSUB ref=0
->FW
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// exp_drv_task -> ref=0 -> ref=0
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 16
PATCHSUB name=apex2us
FW $
ENDASM
ENDFUNC

ENDFILE

//-------------------------- FILEWRITE.C ----------------------------------------------------------
FILE filewrite.c

>>> file=../filewrite_hdr.c

//////////////////////////////////////////////////////////////
// filewritetask
//////////////////////////////////////////////////////////////
FUNC sig=task_FileWrite name=filewritetask
ASM
FW 42
PATCHSUB name=fwt_close
FW 8
PATCHSUB ref=0 comment="Open stage"
FW 1
PATCHSUB ref=1 comment="Write stage"
FW 1
PATCHSUB ref=2 comment="Close stage"
FW $
ENDASM
ENDFUNC

EXIT

//////////////////////////////////////////////////////////////
// open stage
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 13
>>>
//hook start
"    STMFD SP!, {R4-R12,LR}\n"
"    MOV R0, R4\n"
"    BL filewrite_main_hook\n"
"    LDMFD SP!, {R4-R12,LR}\n"
//hook end
<<<
FW 3
PATCHSUB name=fwt_open
->FW
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// write stage
//////////////////////////////////////////////////////////////
FUNC ref=1
ASM
FW 39
PATCHSUB name=fwt_write
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// close stage
//////////////////////////////////////////////////////////////
FUNC ref=2
ASM
FW 7
PATCHSUB name=fwt_close
->FW
//FW $
ENDASM
ENDFUNC

ENDFILE
