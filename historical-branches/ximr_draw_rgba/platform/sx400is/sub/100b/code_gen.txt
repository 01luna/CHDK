//-------------------------- BOOT.C ---------------------------------------------------------------

FILE boot.c

>>> file=../boot_hdr.c

FUNC start=0xFF82000C length=93 name=boot
ASM
FW $-1
>>>
/* CreateTask is located in ROM, patching the lower level CreateTask_low function instead
 * Note: task function is the first argument
*/
// Install CreateTask_low patch
"    LDR     R0, =patch_CreateTask_low\n"   // Patch data
"    LDM     R0, {R1,R2}\n"             // Get two patch instructions
"    LDR     R0, =hook_CreateTask_low\n"    // Address to patch
"    STM     R0, {R1,R2}\n"             // Store patch instructions

<<<
PATCHSUB ref=0
>>>

"patch_CreateTask_low:\n"
"    LDR     PC, [PC,#-0x4]\n"          // Do jump to absolute address CreateTask_my
"    .long   CreateTask_low_my\n"
<<<
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// hook_CreateTask
//////////////////////////////////////////////////////////////
FUNC sig=hook_CreateTask_low name=CreateTask_low_my
ASM
>>> file=../taskhook.S
FW 2
->FW
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// Power-on patch
//////////////////////////////////////////////////////////////
FUNC ref=0 length=27
>>>

    //Replacement of sub_ for correct power-on.
    //(short press = playback mode, long press = record mode)
    // Similar to ixus160: http://chdk.setepontos.com/index.php?topic=12321.msg123724#msg123724
    // look at power-on switch sub_FF86AE74 (FF8687CC) 
    // value and pointer from sub_FF86A770
    *(int*)(0x2978+0x4) = (*(int*)0xC022F48C)&0x100000 ? 0x400000 : 0x200000;

<<<
ASM
FW $-1
PATCHSUB ref=0
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 16
>>>

#if defined(CHDK_NOT_IN_CANON_HEAP) // use original heap offset if CHDK is loaded in high memory
<<<
FW
>>>
#else
"    LDR     R0, =new_sa\n"   // otherwise use patched value
"    LDR     R0, [R0]\n"      //
#endif

<<<
FW 31
PATCHSUB ref=0
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW $-1
PATCHSUB ref=0
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW L22
PATCHSUB ref=0 name=task_Startup_my
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// task_Startup_my
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 6
REM "load DISKBOOT.BIN"
FW 6
>>>
"    BL      CreateTask_spytask\n" // added
<<<
PATCHSUB ref=0 name=taskcreatePhySw_my
>>>
"    BL      init_required_fw_features\n" // added
<<<
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// taskcreatePhySw_my
//////////////////////////////////////////////////////////////
FUNC ref=0 length=18
ASM
FW 11
PATCHSUB name=mykbd_task
PATCHVAL value=0x2000 comment="stack size for new task_PhySw so we don't have to do stack switch"
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// init_file_modules_task
//////////////////////////////////////////////////////////////
>>>
// Workaround for cards becoming read-only in camera when diskboot'ing to playback mode.
// The following flag is checked by the function that calls WriteSDCard (sub_ff8317dc)
// See sx530 porting thread for related discussions. https://chdk.setepontos.com/index.php?topic=12418
void fix_writable_media_flag() {
    *(int*)0x1d38 = 1;
}
<<<

FUNC sig=task_InitFileModules name=init_file_modules_task
ASM
FW 8
>>>
"    BL      fix_writable_media_flag\n" // SD card startup fix
"    BL      core_spytask_can_start\n"  // CHDK: Set "it's-safe-to-start" flag for spytask
<<<
FW $
ENDASM
ENDFUNC

>>> file=../boot_extras.c

ENDFILE


//-------------------------- CAPT_SEQ.C -----------------------------------------------------------

FILE capt_seq.c

>>> file=../capt_seq_hdr.c

//////////////////////////////////////////////////////////////
// capt_seq_task
//////////////////////////////////////////////////////////////
FUNC sig=task_CaptSeq name=capt_seq_task
ASM
FW 64
>>>
"    BL      shooting_expo_iso_override\n"      // added
<<<
FW 1
>>>
"    BL      shooting_expo_param_override\n"    // added
<<<
FW 1
>>>
//To do: Check if this is needed.
//"    MOV     R0, #0\n"                          // added
//"    STR     R0, [R5,#0x28]\n"                  // added, fixes overrides behavior at short shutter press (from S95)
<<<
//REM "above patch makes these three lines redundant"
//REM
//REM
FW 2
// hook fast click function for dfs and remote - not needed if using hack above
PATCHSUB ref=0
FW 2
PATCHSUB ref=1
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// patch for dfs + remote in quickshoot branch: capt_seq_task -> ref=0
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 50
PATCHSUB
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// raw hook: capt_seq_task -> ref=1
//////////////////////////////////////////////////////////////
FUNC ref=1
ASM
FW $-12
PATCHSUB ref=0
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 37
>>>
"    BL      wait_until_remote_button_is_released\n" // added
"    BL      capt_seq_hook_set_nr\n"                 // added
<<<
FW 87
>>> prelabel
"    BL      capt_seq_hook_raw_here \n"         // added
<<<
FW $
>>>
"    .ltorg\n"         // added
<<<
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// exp_drv_task
//////////////////////////////////////////////////////////////
FUNC sig=task_ExpDrv name=exp_drv_task
ASM
FW 266
PATCHSUB ref=0
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// exp_drv_task -> ref=0
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 49
PATCHSUB ref=0
->FW
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// exp_drv_task -> ref=0 -> ref=0
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 18
PATCHSUB name=apex2us
->FW
ENDASM
ENDFUNC

ENDFILE

//-------------------------- MOVIE_REC.C ----------------------------------------------------------

FILE movie_rec.c

>>> file=../movie_rec_hdr.c

//////////////////////////////////////////////////////////////
// movie_record_task
//////////////////////////////////////////////////////////////
FUNC sig=task_MovieRecord name=movie_record_task
ASM
FW 59
>>>
"    BL      save_original_bitrates \n"      // + (executed at recording start)
<<<
FW 3
>>>
//begin patch (only effective in VGA mode)
"    LDR     R0, =video_compression_rate \n" // +
"    BL      set_quality \n"                 // +
"    BL      modify_bitrate \n"              // + (modifies target bitrate if requested)
//end patch
<<<
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// liveimage task
//////////////////////////////////////////////////////////////
FUNC sig=task_LiveImageTask name=liveimage_task
ASM
FW 30
PATCHSUB ref=0
FW $
ENDASM
ENDFUNC

FUNC ref=0 length=43
ASM
FW 28
>>>
// HD movie codepath
<<<
FW 2
PATCHSUB ref=0
PATCHSUB ref=1
FW $
ENDASM
ENDFUNC

FUNC ref=0
ASM
>>>
// Need to execute our code after the firmware subroutine
// it's more complicated here than usual
"    PUSH    {LR} \n"                        // +
"    MOV     LR, PC \n"                      // +
<<<
->FW
>>>
"    LDR     R0, =video_compression_rate \n" // +
"    BL      set_quality \n"                 // +
"    BL      modify_bitrate \n"              // + (modifies target bitrate if requested)
"    POP     {PC} \n"                        // +
<<<
ENDASM
ENDFUNC

FUNC ref=1
ASM
>>>
// Need to execute our code after the firmware subroutine
// it's more complicated here than usual
"    PUSH    {LR} \n"                        // +
"    MOV     LR, PC \n"                      // +
<<<
->FW
>>>
"    LDR     R0, =video_compression_rate \n" // +
"    BL      set_quality \n"                 // +
"    BL      modify_bitrate \n"              // + (modifies target bitrate if requested)
"    POP     {PC} \n"                        // +
<<<
ENDASM
ENDFUNC

ENDFILE

//-------------------------- FILEWRITE.C ----------------------------------------------------------
FILE filewrite.c

>>> file=../filewrite_hdr.c

//////////////////////////////////////////////////////////////
// filewritetask
//////////////////////////////////////////////////////////////
FUNC sig=task_FileWrite name=filewritetask
ASM
FW 46
PATCHSUB name=fwt_close
FW 23
>>>

//mod start
"    LDR R3, =ignore_current_write\n" // !!
"    LDR R3, [R3]\n"
"    CMP R3, #0\n"
"    BNE loc_A\n" // skip creating directory
//mod end

<<<
FW 6
PATCHSUB ref=0 comment="Open stage"
FW 5
PATCHSUB name=fwt_lseek
FW 17
>>>

//mod start
"    LDR R3, =ignore_current_write\n" // !!
"    LDR R3, [R3]\n"
"    CMP R3, #0\n"
"    BNE loc_B\n" // skip flushing the cache
//mod end

<<<
FW 2
>>>
"loc_B:\n"
<<<
FW 1
>>>
"loc_A:\n"
<<<
FW 8
PATCHSUB ref=1 comment="Write stage"
FW 1
PATCHSUB ref=2 comment="Close stage"
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// open stage
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 2
>>>

//hook placed here to avoid conditional branch a few instructions below (watch out for registers!)
"    MOV   R0, R4\n"      //data block start, commented out as R0 is already holding what we need
"    BL filewrite_main_hook\n"
"    MOV     R0, R4\n"      //restore register(s)
//hook end

<<<
FW 36
PATCHSUB name=fwt_open
FW 24
PATCHSUB name=fwt_open
FW 22
>>>

//mod start
"    LDR R3, =current_write_ignored\n"
"    LDR R3, [R3]\n"
"    CMP R3, #0\n"
"    BNE loc_C\n" // jump over the next block
//mod end

<<<
FW 12
>>>
"loc_C:\n"
<<<
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// write stage
//////////////////////////////////////////////////////////////
FUNC ref=1
ASM
FW 33
PATCHSUB name=fwt_write
FW $
>>>
"    .ltorg\n" //+
<<<
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// close stage
//////////////////////////////////////////////////////////////
FUNC ref=2
ASM
FW 14
>>>
//mod start
"    LDR R3, =current_write_ignored\n"
"    LDR R3, [R3]\n"
"    CMP R3, #0\n"
"    BNE loc_D\n" // jump over the next block
//mod end

<<<
FW 2
>>>
"loc_D:\n"
<<<
PATCHSUB name=fwt_close
->FW
ENDASM
ENDFUNC

ENDFILE


