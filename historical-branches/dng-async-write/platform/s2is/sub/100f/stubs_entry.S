// !!! THIS FILE IS GENERATED. DO NOT EDIT. !!!
#include "stubs_asm.h"

// Best match: 79%
NHSTUB(AllocateMemory, 0xff811ba0)
NHSTUB(AllocateUncacheableMemory, 0xff814810)
// ERROR: Close is not found!
NHSTUB(CreatePhysicalVram, 0xff93e4cc)
NHSTUB(CreateTask, 0xff82239c)
NHSTUB(CreateTaskStrict, 0xff823964)
NHSTUB(DeleteFile_Fut, 0xff86fbf4)
NHSTUB(DisableDispatch, 0xff82210c)
// ERROR: DisplayImagePhysicalScreen is not found!
// Best match: 52%
//NHSTUB(DoAFLock, 0xff909014) -- stubs_entry_2.S = 0xff967f48
// ALT: NHSTUB(DoAFLock, 0xff96826c) // 12/11
NHSTUB(EnableDispatch, 0xff822198)
// ERROR: EnterToCompensationEVF is not found!
NHSTUB(ExecuteEventProcedure, 0xff816ab4)
// Best match: 70%
//NHSTUB(ExitFromCompensationEVF, 0xff96b6b4) -- stubs_entry_2.S = 0xff96817c
NHSTUB(ExitTask, 0xff82275c)
NHSTUB(Fclose_Fut, 0xff86fd34)
NHSTUB(Feof_Fut, 0xff86ff48)
NHSTUB(Fflush_Fut, 0xff86ff80)
NHSTUB(Fgets_Fut, 0xff86feb8)
NHSTUB(Fopen_Fut, 0xff86fcf8)
NHSTUB(Fread_Fut, 0xff86fe18)
// Best match: 66%
NHSTUB(FreeMemory, 0xff811bac)
NHSTUB(FreeUncacheableMemory, 0xff814844)
NHSTUB(Fseek_Fut, 0xff86ff00)
NHSTUB(Fwrite_Fut, 0xff86fe68)
// ERROR: GetBatteryTemperature is not found!
// ERROR: GetCCDTemperature is not found!
NHSTUB(GetCurrentAvValue, 0xffaa6d44)
// ALT: NHSTUB(GetCurrentAvValue, 0xffaa8cf8) // 13/0
NHSTUB(GetCurrentTargetDistance, 0xffaa8ca0)
// Best match: 72%
//NHSTUB(GetDrive_ClusterSize, 0xff876894) -- stubs_entry_2.S = 0xff8767a0
// ALT: NHSTUB(GetDrive_ClusterSize, 0xff876894) // 18/7
// Best match: 72%
//NHSTUB(GetDrive_FreeClusters, 0xff876894) -- stubs_entry_2.S = 0xff876838
// ALT: NHSTUB(GetDrive_FreeClusters, 0xff876894) // 18/7
// Best match: 80%
//NHSTUB(GetDrive_TotalClusters, 0xff876894) -- stubs_entry_2.S = 0xff8767fc
// Best match: 87%
NHSTUB(GetFocusLensSubjectDistance, 0xffa8e9ec)
// ALT: NHSTUB(GetFocusLensSubjectDistance, 0xffa8e9ec) // 27/4
// ERROR: GetFocusLensSubjectDistanceFromLens is not found!
// Best match: 55%
//NHSTUB(GetOpticalTemperature, 0xffa9006c) -- stubs_entry_2.S = 0xff82e340
// Best match: 76%
NHSTUB(GetParameterData, 0xff987fb8)
// ALT: NHSTUB(GetParameterData, 0xff987fb8) // 23/7
// Best match: 71%
//NHSTUB(GetPropertyCase, 0xff825d04) -- stubs_entry_2.S = 0xff825d08
// Best match: 96%
NHSTUB(GetSystemTime, 0xff814b98)
// ALT: NHSTUB(GetSystemTime, 0xff814b98) // 26/1
// Best match: 68%
//NHSTUB(GetZoomLensCurrentPoint, 0xffa881f4) -- stubs_entry_2.S = 0xffaa8824
// ALT: NHSTUB(GetZoomLensCurrentPoint, 0xffa881f4) // 20/9
// Best match: 51%
//NHSTUB(GetZoomLensCurrentPosition, 0xffa88208) -- stubs_entry_2.S = 0xffaa8838
// ALT: NHSTUB(GetZoomLensCurrentPosition, 0xffa88208) // 15/14
NHSTUB(IsStrobeChargeCompleted, 0xff912ee0)
// Best match: 96%
NHSTUB(LockMainPower, 0xff9834c8)
// ERROR: MakeAFScan is not found!
// Best match: 70%
NHSTUB(MakeDirectory, 0xff8775b0)
NHSTUB(MakeDirectory_Fut, 0xff86fc80)
// ERROR: Mount_FileSystem is not found!
// Best match: 96%
NHSTUB(MoveFocusLensToDistance, 0xffaa8f30)
// ERROR: MoveZoomLensWithPoint is not found!
// ERROR: Open is not found!
NHSTUB(PT_PlaySound, 0xff97bd18)
// ERROR: PhySw_testgpio is not found!
NHSTUB(PostLogicalEventForNotPowerType, 0xff980158)
NHSTUB(PostLogicalEventToUI, 0xff9801e4)
// ALT: NHSTUB(PostLogicalEventToUI, 0xff98027c) // 25/0
NHSTUB(ProtectFile, 0xff86f360)
// Best match: 92%
NHSTUB(PutInNdFilter, 0xffaa6d58)
// ALT: NHSTUB(PutInNdFilter, 0xffaa6d58) // 25/2
// ALT: NHSTUB(PutInNdFilter, 0xffaa6da0) // 25/2
// ALT: NHSTUB(PutInNdFilter, 0xffaa6da0) // 25/2
// ALT: NHSTUB(PutInNdFilter, 0xffaa7168) // 25/2
// ALT: NHSTUB(PutInNdFilter, 0xffaa7168) // 25/2
// ALT: NHSTUB(PutInNdFilter, 0xffaa88fc) // 25/2
// ALT: NHSTUB(PutInNdFilter, 0xffaa88fc) // 25/2
// ALT: NHSTUB(PutInNdFilter, 0xffaa8944) // 25/2
// ALT: NHSTUB(PutInNdFilter, 0xffaa8944) // 25/2
// Best match: 94%
NHSTUB(PutOutNdFilter, 0xffaa71b0)
// ALT: NHSTUB(PutOutNdFilter, 0xffaa71b0) // 16/1
// ERROR: Read is not found!
NHSTUB(RefreshPhysicalScreen, 0xff9988b4)
// Best match: 52%
//NHSTUB(Remove, 0xff8d290c) -- stubs_entry_2.S = 0xff877380
NHSTUB(RenameFile_Fut, 0xff86fb74)
// Best match: 84%
//NHSTUB(Restart, 0xff823de4) -- stubs_entry_2.S = 0xff823de8
// Best match: 95%
NHSTUB(SetAE_ShutterSpeed, 0xffaabe0c)
// Best match: 96%
NHSTUB(SetAutoShutdownTime, 0xff9833c0)
// Best match: 73%
NHSTUB(SetCurrentCaptureModeType, 0xff9aed0c)
// Best match: 58%
NHSTUB(SetFileAttributes, 0xff8774cc)
// Best match: 87%
NHSTUB(SetLogicalEventActive, 0xff981968)
// Best match: 66%
//NHSTUB(SetParameterData, 0xff987fb4) -- stubs_entry_2.S = 0xff987ee4
// ERROR: SetPropertyCase is not found!
NHSTUB(SleepTask, 0xff8221fc)
// ALT: NHSTUB(SleepTask, 0xff8222b0) // 31/0
NHSTUB(TakeSemaphore, 0xff821b6c)
NHSTUB(TurnOffBackLight, 0xff9cbed8)
NHSTUB(TurnOnBackLight, 0xff9cbeac)
// Best match: 78%
//NHSTUB(UnlockAF, 0xff909054) -- stubs_entry_2.S = 0xff968024
// Best match: 96%
NHSTUB(UnlockMainPower, 0xff98357c)
NHSTUB(Unmount_FileSystem, 0xff8762d4)
// ERROR: UnsetZoomForMovie is not found!
// Best match: 96%
NHSTUB(UpdateMBROnFlash, 0xff876480)
// ERROR: VbattGet is not found!
// ERROR: Write is not found!
// ERROR: WriteSDCard is not found!
NHSTUB(_log, 0xffae0ac0)
// ALT: NHSTUB(_log, 0xffae0ac0) // 27/0
NHSTUB(_log10, 0xffae1168)
// ALT: NHSTUB(_log10, 0xffae1168) // 27/0
NHSTUB(_pow, 0xffae1658)
// ALT: NHSTUB(_pow, 0xffae1658) // 25/0
NHSTUB(_sqrt, 0xffae59a4)
// ALT: NHSTUB(_sqrt, 0xffae59a4) // 24/0
// Best match: 96%
NHSTUB(add_ptp_handler, 0xffa4bc20)
NHSTUB(apex2us, 0xff8bbe28)
NHSTUB(chdir, 0xffaf4c00)
// ALT: NHSTUB(chdir, 0xffaf4c00) // 27/0
NHSTUB(close, 0xffaf4540)
NHSTUB(closedir, 0xffaf04e0)
NHSTUB(errnoOfTaskGet, 0xffaf0cac)
// Best match: 92%
NHSTUB(exmem_alloc, 0xff812a74)
// ERROR: free is not found!
NHSTUB(ints_disable, 0xff81e254)
NHSTUB(ints_enable, 0xff81e260)
NHSTUB(ioctl, 0xffaf4680)
NHSTUB(iosDevAdd, 0xffaf5760)
NHSTUB(iosDevDelete, 0xffaf5738)
NHSTUB(iosDevFind, 0xffaf56ec)
NHSTUB(iosDrvInstall, 0xffaf5a24)
NHSTUB(isalpha, 0xffaea454)
NHSTUB(isdigit, 0xffaea484)
NHSTUB(islower, 0xffaea4b4)
NHSTUB(ispunct, 0xffaea4e4)
NHSTUB(isspace, 0xffaea4fc)
NHSTUB(isupper, 0xffaea514)
NHSTUB(isxdigit, 0xffaea52c)
// ERROR: kbd_p1_f is not found!
// ERROR: kbd_p1_f_cont is not found!
// ERROR: kbd_p2_f is not found!
// Best match: 83%
NHSTUB(kbd_pwr_off, 0xff82ae84)
// ALT: NHSTUB(kbd_pwr_off, 0xff82aea0) // 5/1
// ALT: NHSTUB(kbd_pwr_off, 0xff82af70) // 5/1
// ALT: NHSTUB(kbd_pwr_off, 0xff82af8c) // 5/1
// ALT: NHSTUB(kbd_pwr_off, 0xff82b0d4) // 5/1
// ALT: NHSTUB(kbd_pwr_off, 0xff82b0f0) // 5/1
// Best match: 55%
NHSTUB(kbd_pwr_on, 0xff9402b0)
// ALT: NHSTUB(kbd_pwr_on, 0xff9402dc) // 5/4
// ERROR: kbd_read_keys_r2 is not found!
// Best match: 93%
NHSTUB(localtime, 0xffaeecd4)
NHSTUB(lseek, 0xffaf4684)
// Best match: 53%
NHSTUB(malloc, 0xffaf7580)
// ALT: NHSTUB(malloc, 0xffaf7580) // 15/13
NHSTUB(memPartInfoGet, 0xffaf79a0)
NHSTUB(memchr, 0xffaee080)
NHSTUB(memcmp, 0xffaee0b4)
// ALT: NHSTUB(memcmp, 0xffafc49c) // 9/0
NHSTUB(memcpy, 0xffaee0f0)
NHSTUB(memset, 0xffaee168)
// Best match: 61%
NHSTUB(mkdir, 0xff8774fc)
// ALT: NHSTUB(mkdir, 0xff8775bc) // 19/12
NHSTUB(mktime, 0xffaeee9c)
NHSTUB(open, 0xffaf4b84)
NHSTUB(opendir, 0xffaf0514)
NHSTUB(qsort, 0xffaed914)
NHSTUB(rand, 0xffaed938)
// ALT: NHSTUB(rand, 0xffaed938) // 8/0
NHSTUB(read, 0xffaf45a0)
NHSTUB(readdir, 0xffaf04ac)
NHSTUB(rename, 0xffaf4b8c)
// ALT: NHSTUB(rename, 0xffaf4b8c) // 26/0
NHSTUB(rewinddir, 0xffaf04d4)
NHSTUB(srand, 0xffaed95c)
// ALT: NHSTUB(srand, 0xffaed95c) // 4/0
NHSTUB(stat, 0xffaf05a8)
NHSTUB(strcat, 0xffaee188)
NHSTUB(strchr, 0xffaee1b4)
NHSTUB(strcmp, 0xffaee1d8)
NHSTUB(strcpy, 0xffaee36c)
NHSTUB(strftime, 0xffaef9f4)
NHSTUB(strlen, 0xffaee4d0)
NHSTUB(strncmp, 0xffaee534)
NHSTUB(strncpy, 0xffaee578)
// ALT: NHSTUB(strncpy, 0xffaee578) // 24/0
NHSTUB(strpbrk, 0xffaee5c0)
NHSTUB(strrchr, 0xffaee5fc)
// ALT: NHSTUB(strrchr, 0xffaee5fc) // 8/0
NHSTUB(strtol, 0xffaedd50)
NHSTUB(strtoul, 0xffaedef8)
NHSTUB(taskCreateHookAdd, 0xffafac00)
NHSTUB(taskDeleteHookAdd, 0xffafab3c)
// Best match: 82%
NHSTUB(taskIdListGet, 0xffb026e4)
NHSTUB(taskLock, 0xffb02da0)
NHSTUB(taskName, 0xffb025dc)
NHSTUB(taskResume, 0xffb029c0)
NHSTUB(taskSuspend, 0xffb027ec)
NHSTUB(taskUnlock, 0xffb02e48)
NHSTUB(time, 0xffaefa20)
// ALT: NHSTUB(time, 0xffaefa20) // 25/0
NHSTUB(tolower, 0xffaea544)
NHSTUB(toupper, 0xffaea554)
NHSTUB(utime, 0xffaf063c)
// ALT: NHSTUB(utime, 0xffaf063c) // 26/0
NHSTUB(vsprintf, 0xffaf1e00)
NHSTUB(write, 0xffaf4610)
