//-------------------------- BOOT.C ---------------------------------------------------------------

FILE boot.c

>>> file=../boot_hdr.c

FUNC start=0xFF02000C length=93 name=boot
ASM
FW $-1
>>>
/* Install task hooks via 0x193x is not possible with this new dryos version
   So the below code patches the CreateTask function in RAM to install our
   hook -- ERR99
*/
// Install CreateTask patch
"    LDR     R0, =patch_CreateTask\n"   // Patch data
"    LDM     R0, {R1,R2}\n"             // Get two patch instructions
"    LDR     R0, =hook_CreateTask\n"    // Address to patch
"    STM     R0, {R1,R2}\n"             // Store patch instructions

<<<
PATCHSUB ref=0
>>>

"patch_CreateTask:\n"
"    LDR     PC, [PC,#-0x4]\n"          // Do jump to absolute address CreateTask_my
"    .long   CreateTask_my\n"
<<<
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// hook_CreateTask
//////////////////////////////////////////////////////////////
FUNC sig=hook_CreateTask name=CreateTask_my
ASM
>>> file=../taskhook.S
FW 2
->FW
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// Power-on patch
//////////////////////////////////////////////////////////////
FUNC ref=0 length=27
>>>

   // Replacement of sub_FF02BA64 for correct power-on.
   // (ON/OFF short press = playback mode, long press = record mode)
   // value and pointer from sub_FF074124 sx610hs_100a 
   *(int*)(0x2e70+0x4) = (*(int*)0xC022F48C)&0x100000 ? 0x80000 : 0x40000;

<<<
ASM
FW $-1
PATCHSUB ref=0
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 16
>>>

#if defined(CHDK_NOT_IN_CANON_HEAP) // use original heap offset if CHDK is loaded in high memory
<<<
FW
>>>
#else
"    LDR     R0, =new_sa\n"   // otherwise use patched value
"    LDR     R0, [R0]\n"      //
#endif

<<<
FW 34
PATCHSUB ref=0
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW $-1
PATCHSUB ref=0
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 3
REM "See: http://chdk.setepontos.com/index.php?topic=12321.msg121619#msg121619"
REM
REM
REM
REM
FW 6
PATCHSUB ref=0 name=task_Startup_my
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// task_Startup_my
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 6
REM "load DISKBOOT.BIN"
FW 6
>>>
"    BL      CreateTask_spytask\n" // added
<<<
PATCHSUB ref=0 name=taskcreatePhySw_my
>>>
"    BL      init_required_fw_features\n" // added
<<<
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// taskcreatePhySw_my
//////////////////////////////////////////////////////////////
FUNC ref=0 length=18
ASM
FW 11
PATCHSUB name=mykbd_task
PATCHVAL value=0x2000 comment="stack size for new task_PhySw so we don't have to do stack switch"
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// init_file_modules_task
//////////////////////////////////////////////////////////////
>>>
// Workaround for cards becoming read-only in camera when diskboot'ing to playback mode.
// The following flag is checked by the function that calls WriteSDCard (sub_FF02FFC0)_sx610_100a
// See sx530 porting thread for related discussions. https://chdk.setepontos.com/index.php?topic=12418
void fix_writable_media_flag() {
    *(int*)0x1d68 = 1;
}
<<<

FUNC sig=task_InitFileModules name=init_file_modules_task
ASM
FW 8
>>>
"    BL      fix_writable_media_flag\n" // SD card startup fix
"    BL      core_spytask_can_start\n"  // CHDK: Set "it's-safe-to-start" flag for spytask
<<<
FW $
ENDASM
ENDFUNC

>>> file=../boot_extras.c

ENDFILE



//-------------------------- CAPT_SEQ.C -----------------------------------------------------------

FILE capt_seq.c

>>> file=../capt_seq_hdr.c

//////////////////////////////////////////////////////////////
// capt_seq_task
//////////////////////////////////////////////////////////////
FUNC sig=task_CaptSeq name=capt_seq_task
ASM
FW 68
>>>
"    BL      shooting_expo_param_override\n"    // added
<<<
FW 1
>>>
//To do: Check if this is needed.
//"    MOV     R0, #0\n"                          // added
//"    STR     R0, [R5,#0x28]\n"                  // added, fixes overrides behavior at short shutter press (from S95)
<<<
//REM "above patch makes these three lines redundant"
//REM
//REM
FW 2
// hook fast click function for dfs and remote - not needed if using hack above
PATCHSUB ref=0
FW 2
PATCHSUB ref=1
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// patch for dfs + remote in quickshoot branch: capt_seq_task -> ref=0
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 47
PATCHSUB

FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// raw hook ref=1
//////////////////////////////////////////////////////////////
FUNC ref=1
ASM
FW 116
PATCHSUB ref=0

FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// Common patched function applied to ref=0->noref  and ref=1->ref=0
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 54
>>>
"    BL      wait_until_remote_button_is_released\n" // added
"    BL      capt_seq_hook_set_nr\n"                 // added
<<<

FW 87
>>> prelabel
"    BL      capt_seq_hook_raw_here \n"         // added
<<<
FW $
>>>
"    .ltorg\n"         // added
<<<
ENDASM
ENDFUNC

ENDFILE

//-------------------------- FILEWRITE.C ----------------------------------------------------------

FILE filewrite.c

>>> file=../filewrite_hdr.c

//////////////////////////////////////////////////////////////
// filewritetask
//////////////////////////////////////////////////////////////
FUNC sig=task_FileWrite name=filewritetask
ASM
FW 1
>>>
#ifdef FILEWRITE_DEBUG_LOG
"bl log_fwt_start\n"
#endif
<<<
FW 10
>>>
#ifdef FILEWRITE_DEBUG_LOG
"ldr     r0, [sp,#8]\n"
"bl log_fwt_msg\n"
#endif
<<<
FW 50
PATCHSUB ref 0 comment="msg 12 - open, main hook"
FW 15
PATCHSUB ref 1 comment="msg 0-6 - write chunk"
FW 1
PATCHSUB ref 2 comment="msg 0-7 - close"
FW $
ENDASM
ENDFUNC

// msg 12: Open
FUNC ref=0
ASM
FW 2
>>>
//hook placed here to avoid conditional branch a few instructions below (watch out for registers!)
//"  MOV   R0, R4\n"      //data block start, commented out as R0 is already holding what we need
"    BL filewrite_main_hook\n"
"    MOV     R0, R4\n"      //restore register(s)
<<<
FW 39
PATCHSUB name=fwt_open
FW 52
>>>
"    LDR R3, =current_write_ignored\n"
"    LDR R3, [R3]\n"
"    CMP R3, #0\n"
"    BNE loc_C\n" // jump over the next block
<<<
FW 12
>>>
"loc_C:\n"
<<<
FW $
ENDASM
ENDFUNC

// msg 0-6: write chunk
FUNC ref=1
ASM
FW 33
PATCHSUB name=fwt_write
FW $
ENDASM
ENDFUNC

// msg 7: close
FUNC ref=2
ASM
FW 35
>>>
"    LDR R3, =current_write_ignored\n"
"    LDR R3, [R3]\n"
"    CMP R3, #0\n"
"    BNE loc_D\n" // jump over the next block
<<<
FW 2
>>>
"loc_D:\n"
<<<
PATCHSUB name=fwt_close
->FW
ENDASM
ENDFUNC
>>>
#endif // CAM_HAS_FILEWRITETASK_HOOK
<<<

ENDFILE

