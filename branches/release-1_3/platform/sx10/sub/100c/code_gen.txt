//-------------------------- BOOT.C ---------------------------------------------------------------
FILE boot.c

>>> file=../boot_hdr.c

//////////////////////////////////////////////////////////////
// boot
//////////////////////////////////////////////////////////////
FUNC start=0xFF81000C length=86 name=boot
ASM
FW $-1
PATCHSUB ref=0
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// boot -> ref=0
//////////////////////////////////////////////////////////////
FUNC ref=0 length=27
>>>

    *(int*)0x1930=(int)taskHook;
    *(int*)0x1934=(int)taskHook;

    // replacement of sub_FF8218C8 for correct power-on.
    //(short press = playback mode, long press = record mode)
    *(int*)(0x25BC+0x4)= (*(int*)0xC0220134)&1 ? 0x2000000 : 0x1000000;

<<<
ASM
FW $-1
PATCHSUB ref=0
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// boot -> ref=0 -> ref=0
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 7
>>>

#if defined(CHDK_NOT_IN_CANON_HEAP) // use original heap offset if CHDK is loaded in high memory
<<<
FW
>>>
#else
"    LDR     R0, =new_sa\n"   // otherwise use patched value
"    LDR     R0, [R0]\n"      //
#endif

<<<
FW 12
PATCHSUB ref=0
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// boot -> ref=0 -> ref=0 -> ref=0
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW $-1
PATCHSUB name=taskcreate_Startup_my ref=0
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// taskcreate_Startup_my
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 14
REM "Removed for correct power-on"
FW 8
PATCHSUB name=task_Startup_my ref=0
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// task_Startup_my
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 6
REM "start diskboot.bin"
FW 5
>>>
"    BL      CreateTask_spytask\n"  // added
<<<
PATCHSUB name=taskcreatePhySw_my ref=0
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// taskcreatePhySw_my
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 7
PATCHSUB name=mykbd_task
PATCHVAL value=0x2000 comment="stack size for new task_PhySw"
->FW
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// init_file_modules_task
//////////////////////////////////////////////////////////////
FUNC sig=task_InitFileModules name=init_file_modules_task
ASM
FW 7
PATCHSUB ref=0
>>>
"    BL      core_spytask_can_start\n"  // CHDK: Set "it's-safe-to-start" flag for spytask
<<<
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// init_file_modules_task -> ref=0
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 1
PATCHSUB ref=0
->FW
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// init_file_modules_task -> ref=0 -> ref=0
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 16
PATCHSUB ref=0
->FW
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// init_file_modules_task -> ref=0 -> ref=0 -> ref=0
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 13
PATCHSUB ref=0
->FW
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// init_file_modules_task -> ref=0 -> ref=0 -> ref=0 -> ref0
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 40
>>> file=../FAT32_detect.S
FW 7
REM "replaced below"
FW 12
REM "replaced below"
>>>
"    LDRB    R12, [LR,#0x1FE]\n"    // replace instructions above - First MBR signature byte (0x55), LR is original offset.
"    LDRB    LR, [LR,#0x1FF]\n"     // replace instructions above - Last MBR signature byte (0xAA), LR is original offset.
<<<
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// JogDial_task_my
//////////////////////////////////////////////////////////////

FUNC sig=task_RotaryEncoder name=JogDial_task_my
ASM
FW 15
>>>
//------------------  added code ---------------------
"labelA:\n"
"    LDR     R0, =jogdial_stopped\n"
"    LDR     R0, [R0]\n"
"    CMP     R0, #1\n"
"    BNE     labelB\n"
"    MOV     R0, #40\n"
"    BL      _SleepTask\n"
"    B       labelA\n"
"labelB:\n"
//------------------  original code ------------------
<<<
FW $
ENDASM
ENDFUNC

ENDFILE


ENDFILE
