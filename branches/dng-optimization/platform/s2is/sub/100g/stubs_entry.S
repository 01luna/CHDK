// !!! THIS FILE IS GENERATED. DO NOT EDIT. !!!
#include "stubs_asm.h"

// Best match: 79%
NHSTUB(AllocateMemory, 0xff811ba0)
NHSTUB(AllocateUncacheableMemory, 0xff814810)
// ERROR: Close is not found!
NHSTUB(CreatePhysicalVram, 0xff93e258)
NHSTUB(CreateTask, 0xff82239c)
NHSTUB(CreateTaskStrict, 0xff823964)
NHSTUB(DeleteFile_Fut, 0xff86f980)
NHSTUB(DisableDispatch, 0xff82210c)
// ERROR: DisplayImagePhysicalScreen is not found!
// Best match: 52%
//NHSTUB(DoAFLock, 0xff908da0) -- stubs_entry_2.S = 0xff967cd4
// ALT: NHSTUB(DoAFLock, 0xff967ff8) // 12/11
NHSTUB(EnableDispatch, 0xff822198)
// ERROR: EnterToCompensationEVF is not found!
NHSTUB(ExecuteEventProcedure, 0xff816ab4)
// Best match: 70%
//NHSTUB(ExitFromCompensationEVF, 0xff96b440) -- stubs_entry_2.S = 0xff967f08
NHSTUB(ExitTask, 0xff82275c)
NHSTUB(Fclose_Fut, 0xff86fac0)
NHSTUB(Feof_Fut, 0xff86fcd4)
NHSTUB(Fflush_Fut, 0xff86fd0c)
NHSTUB(Fgets_Fut, 0xff86fc44)
NHSTUB(Fopen_Fut, 0xff86fa84)
NHSTUB(Fread_Fut, 0xff86fba4)
// Best match: 66%
NHSTUB(FreeMemory, 0xff811bac)
NHSTUB(FreeUncacheableMemory, 0xff814844)
NHSTUB(Fseek_Fut, 0xff86fc8c)
NHSTUB(Fwrite_Fut, 0xff86fbf4)
// ERROR: GetBatteryTemperature is not found!
// ERROR: GetCCDTemperature is not found!
NHSTUB(GetCurrentAvValue, 0xffaa6ad0)
// ALT: NHSTUB(GetCurrentAvValue, 0xffaa8a84) // 13/0
NHSTUB(GetCurrentTargetDistance, 0xffaa8a2c)
// Best match: 72%
//NHSTUB(GetDrive_ClusterSize, 0xff876620) -- stubs_entry_2.S = 0xff87652c
// ALT: NHSTUB(GetDrive_ClusterSize, 0xff876620) // 18/7
// Best match: 72%
//NHSTUB(GetDrive_FreeClusters, 0xff876620) -- stubs_entry_2.S = 0xff8765c4
// ALT: NHSTUB(GetDrive_FreeClusters, 0xff876620) // 18/7
// Best match: 80%
//NHSTUB(GetDrive_TotalClusters, 0xff876620) -- stubs_entry_2.S = 0xff876588
// Best match: 87%
NHSTUB(GetFocusLensSubjectDistance, 0xffa8e778)
// ALT: NHSTUB(GetFocusLensSubjectDistance, 0xffa8e778) // 27/4
// ERROR: GetFocusLensSubjectDistanceFromLens is not found!
// Best match: 55%
//NHSTUB(GetOpticalTemperature, 0xffa8fdf8) -- stubs_entry_2.S = 0xff82e340
// Best match: 76%
NHSTUB(GetParameterData, 0xff987d44)
// ALT: NHSTUB(GetParameterData, 0xff987d44) // 23/7
// Best match: 71%
//NHSTUB(GetPropertyCase, 0xff825d04) -- stubs_entry_2.S = 0xff825d08
// Best match: 96%
NHSTUB(GetSystemTime, 0xff814b98)
// ALT: NHSTUB(GetSystemTime, 0xff814b98) // 26/1
// Best match: 68%
//NHSTUB(GetZoomLensCurrentPoint, 0xffa87f80) -- stubs_entry_2.S = 0xffaa85b0
// ALT: NHSTUB(GetZoomLensCurrentPoint, 0xffa87f80) // 20/9
// Best match: 51%
//NHSTUB(GetZoomLensCurrentPosition, 0xffa87f94) -- stubs_entry_2.S = 0xffaa85c4
// ALT: NHSTUB(GetZoomLensCurrentPosition, 0xffa87f94) // 15/14
NHSTUB(IsStrobeChargeCompleted, 0xff912c6c)
// Best match: 96%
NHSTUB(LockMainPower, 0xff983254)
// ERROR: MakeAFScan is not found!
// Best match: 70%
NHSTUB(MakeDirectory, 0xff87733c)
NHSTUB(MakeDirectory_Fut, 0xff86fa0c)
// ERROR: Mount_FileSystem is not found!
// Best match: 96%
NHSTUB(MoveFocusLensToDistance, 0xffaa8cbc)
// ERROR: MoveZoomLensWithPoint is not found!
// ERROR: Open is not found!
NHSTUB(PT_PlaySound, 0xff97baa4)
// ERROR: PhySw_testgpio is not found!
NHSTUB(PostLogicalEventForNotPowerType, 0xff97fee4)
NHSTUB(PostLogicalEventToUI, 0xff97ff70)
// ALT: NHSTUB(PostLogicalEventToUI, 0xff980008) // 25/0
NHSTUB(ProtectFile, 0xff86f0ec)
// Best match: 92%
NHSTUB(PutInNdFilter, 0xffaa6ae4)
// ALT: NHSTUB(PutInNdFilter, 0xffaa6ae4) // 25/2
// ALT: NHSTUB(PutInNdFilter, 0xffaa6b2c) // 25/2
// ALT: NHSTUB(PutInNdFilter, 0xffaa6b2c) // 25/2
// ALT: NHSTUB(PutInNdFilter, 0xffaa6ef4) // 25/2
// ALT: NHSTUB(PutInNdFilter, 0xffaa6ef4) // 25/2
// ALT: NHSTUB(PutInNdFilter, 0xffaa8688) // 25/2
// ALT: NHSTUB(PutInNdFilter, 0xffaa8688) // 25/2
// ALT: NHSTUB(PutInNdFilter, 0xffaa86d0) // 25/2
// ALT: NHSTUB(PutInNdFilter, 0xffaa86d0) // 25/2
// Best match: 94%
NHSTUB(PutOutNdFilter, 0xffaa6f3c)
// ALT: NHSTUB(PutOutNdFilter, 0xffaa6f3c) // 16/1
// ERROR: Read is not found!
NHSTUB(RefreshPhysicalScreen, 0xff998640)
// Best match: 52%
//NHSTUB(Remove, 0xff8d2698) -- stubs_entry_2.S = 0xff87710c
NHSTUB(RenameFile_Fut, 0xff86f900)
// Best match: 84%
//NHSTUB(Restart, 0xff823de4) -- stubs_entry_2.S = 0xff823de8
// Best match: 95%
NHSTUB(SetAE_ShutterSpeed, 0xffaabb98)
// Best match: 96%
NHSTUB(SetAutoShutdownTime, 0xff98314c)
// Best match: 73%
NHSTUB(SetCurrentCaptureModeType, 0xff9aea98)
// Best match: 58%
NHSTUB(SetFileAttributes, 0xff877258)
// Best match: 87%
NHSTUB(SetLogicalEventActive, 0xff9816f4)
// Best match: 66%
//NHSTUB(SetParameterData, 0xff987d40) -- stubs_entry_2.S = 0xff987c70
// ERROR: SetPropertyCase is not found!
NHSTUB(SleepTask, 0xff8221fc)
// ALT: NHSTUB(SleepTask, 0xff8222b0) // 31/0
NHSTUB(TakeSemaphore, 0xff821b6c)
NHSTUB(TurnOffBackLight, 0xff9cbc64)
NHSTUB(TurnOnBackLight, 0xff9cbc38)
// Best match: 78%
//NHSTUB(UnlockAF, 0xff908de0) -- stubs_entry_2.S = 0xff967db0
// Best match: 96%
NHSTUB(UnlockMainPower, 0xff983308)
NHSTUB(Unmount_FileSystem, 0xff876060)
// ERROR: UnsetZoomForMovie is not found!
// Best match: 96%
NHSTUB(UpdateMBROnFlash, 0xff87620c)
// ERROR: VbattGet is not found!
// ERROR: Write is not found!
// ERROR: WriteSDCard is not found!
NHSTUB(_log, 0xffae084c)
// ALT: NHSTUB(_log, 0xffae084c) // 27/0
NHSTUB(_log10, 0xffae0ef4)
// ALT: NHSTUB(_log10, 0xffae0ef4) // 27/0
NHSTUB(_pow, 0xffae13e4)
// ALT: NHSTUB(_pow, 0xffae13e4) // 25/0
NHSTUB(_sqrt, 0xffae5730)
// ALT: NHSTUB(_sqrt, 0xffae5730) // 24/0
// Best match: 96%
NHSTUB(add_ptp_handler, 0xffa4b9ac)
NHSTUB(apex2us, 0xff8bbbb4)
NHSTUB(chdir, 0xffaf498c)
// ALT: NHSTUB(chdir, 0xffaf498c) // 27/0
NHSTUB(close, 0xffaf42cc)
NHSTUB(closedir, 0xffaf026c)
NHSTUB(errnoOfTaskGet, 0xffaf0a38)
// Best match: 92%
NHSTUB(exmem_alloc, 0xff812a74)
// ERROR: free is not found!
NHSTUB(ints_disable, 0xff81e254)
NHSTUB(ints_enable, 0xff81e260)
NHSTUB(ioctl, 0xffaf440c)
NHSTUB(iosDevAdd, 0xffaf54ec)
NHSTUB(iosDevDelete, 0xffaf54c4)
NHSTUB(iosDevFind, 0xffaf5478)
NHSTUB(iosDrvInstall, 0xffaf57b0)
NHSTUB(isalpha, 0xffaea1e0)
NHSTUB(isdigit, 0xffaea210)
NHSTUB(islower, 0xffaea240)
NHSTUB(ispunct, 0xffaea270)
NHSTUB(isspace, 0xffaea288)
NHSTUB(isupper, 0xffaea2a0)
NHSTUB(isxdigit, 0xffaea2b8)
// ERROR: kbd_p1_f is not found!
// ERROR: kbd_p1_f_cont is not found!
// ERROR: kbd_p2_f is not found!
// Best match: 83%
NHSTUB(kbd_pwr_off, 0xff82ae84)
// ALT: NHSTUB(kbd_pwr_off, 0xff82aea0) // 5/1
// ALT: NHSTUB(kbd_pwr_off, 0xff82af70) // 5/1
// ALT: NHSTUB(kbd_pwr_off, 0xff82af8c) // 5/1
// ALT: NHSTUB(kbd_pwr_off, 0xff82b0d4) // 5/1
// ALT: NHSTUB(kbd_pwr_off, 0xff82b0f0) // 5/1
// Best match: 55%
NHSTUB(kbd_pwr_on, 0xff94003c)
// ALT: NHSTUB(kbd_pwr_on, 0xff940068) // 5/4
// ERROR: kbd_read_keys_r2 is not found!
// Best match: 93%
NHSTUB(localtime, 0xffaeea60)
NHSTUB(lseek, 0xffaf4410)
// Best match: 53%
NHSTUB(malloc, 0xffaf730c)
// ALT: NHSTUB(malloc, 0xffaf730c) // 15/13
NHSTUB(memPartInfoGet, 0xffaf772c)
NHSTUB(memchr, 0xffaede0c)
NHSTUB(memcmp, 0xffaede40)
// ALT: NHSTUB(memcmp, 0xffafc228) // 9/0
NHSTUB(memcpy, 0xffaede7c)
NHSTUB(memset, 0xffaedef4)
// Best match: 61%
NHSTUB(mkdir, 0xff877288)
// ALT: NHSTUB(mkdir, 0xff877348) // 19/12
NHSTUB(mktime, 0xffaeec28)
NHSTUB(open, 0xffaf4910)
NHSTUB(opendir, 0xffaf02a0)
NHSTUB(qsort, 0xffaed6a0)
NHSTUB(rand, 0xffaed6c4)
// ALT: NHSTUB(rand, 0xffaed6c4) // 8/0
NHSTUB(read, 0xffaf432c)
NHSTUB(readdir, 0xffaf0238)
NHSTUB(rename, 0xffaf4918)
// ALT: NHSTUB(rename, 0xffaf4918) // 26/0
NHSTUB(rewinddir, 0xffaf0260)
NHSTUB(srand, 0xffaed6e8)
// ALT: NHSTUB(srand, 0xffaed6e8) // 4/0
NHSTUB(stat, 0xffaf0334)
NHSTUB(strcat, 0xffaedf14)
NHSTUB(strchr, 0xffaedf40)
NHSTUB(strcmp, 0xffaedf64)
NHSTUB(strcpy, 0xffaee0f8)
NHSTUB(strftime, 0xffaef780)
NHSTUB(strlen, 0xffaee25c)
NHSTUB(strncmp, 0xffaee2c0)
NHSTUB(strncpy, 0xffaee304)
// ALT: NHSTUB(strncpy, 0xffaee304) // 24/0
NHSTUB(strpbrk, 0xffaee34c)
NHSTUB(strrchr, 0xffaee388)
// ALT: NHSTUB(strrchr, 0xffaee388) // 8/0
NHSTUB(strtol, 0xffaedadc)
NHSTUB(strtoul, 0xffaedc84)
NHSTUB(taskCreateHookAdd, 0xffafa98c)
NHSTUB(taskDeleteHookAdd, 0xffafa8c8)
// Best match: 82%
NHSTUB(taskIdListGet, 0xffb02470)
NHSTUB(taskLock, 0xffb02b2c)
NHSTUB(taskName, 0xffb02368)
NHSTUB(taskResume, 0xffb0274c)
NHSTUB(taskSuspend, 0xffb02578)
NHSTUB(taskUnlock, 0xffb02bd4)
NHSTUB(time, 0xffaef7ac)
// ALT: NHSTUB(time, 0xffaef7ac) // 25/0
NHSTUB(tolower, 0xffaea2d0)
NHSTUB(toupper, 0xffaea2e0)
NHSTUB(utime, 0xffaf03c8)
// ALT: NHSTUB(utime, 0xffaf03c8) // 26/0
NHSTUB(vsprintf, 0xffaf1b8c)
NHSTUB(write, 0xffaf439c)
