//-------------------------- BOOT.C --------------------------------------------------------------

FILE boot.c
>>> file=../boot_hdr.c

//////////////////////////////////////////////////////////////
// boot
//** boot @ 0xFF81000C - 0xFF810160, length=86
//////////////////////////////////////////////////////////////
FUNC start=0xFF81000C length=86 name=boot
ASM
FW $-1
PATCHSUB ref=0
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// boot -> ref=0
//** sub_FF8101A0_my @ 0xFF8101A0 - 0xFF810208, length=27
//////////////////////////////////////////////////////////////
FUNC ref=0 length=27
>>>
   *(int*)0x1934=(int)taskCreateHook;
   *(int*)0x1938=(int)taskCreateHook;
   *(int*)0x1930=(int)taskCreateHook; //  don't know why but movie will only work with 1930 and card lock only with 1934 - 1938
   *(int*)(0x24C0+4)= (*(int*)0xC0220128)&1 ? 0x2000000 : 0x1000000; // replacement of sub_FF821BD4 for correct power-on.
<<<
ASM
FW $-1
PATCHSUB ref=0
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// boot -> ref=0 -> ref=0
//** sub_FF810FC4_my @ 0xFF810FC4 - 0xFF811070, length=44
//////////////////////////////////////////////////////////////
FUNC ref=0 length=44
ASM
FW 7
>>>
#if defined(CHDK_NOT_IN_CANON_HEAP)
<<<
FW
>>>
#else
"    LDR     R0, =new_sa\n"        // +
"    LDR     R0, [R0]\n"           // +
#endif
<<<
FW 12
PATCHSUB ref=0
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// boot -> ref=0 -> ref=0 -> ref=0
//** sub_FF814D38_my @ 0xFF814D38 - 0xFF814DAC, length=30
//////////////////////////////////////////////////////////////
FUNC ref=0 length=30
ASM
FW $-1
PATCHSUB ref=0 name=taskcreate_Startup_my
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// boot -> ref=0 -> ref=0 -> ref=0 -> ref=0
//** taskcreate_Startup_my @ 0xFF81C260 - 0xFF81C2D4, length=30
//////////////////////////////////////////////////////////////
FUNC ref=0 length=30
ASM
FW 14
REM "-- replaced for power button startup"
FW 8
PATCHSUB ref=0 name=task_Startup_my
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// boot -> ref=0 -> ref=0 -> ref=0 -> ref=0 -> ref=0
//** task_Startup_my @ 0xFF81C1FC - 0xFF81C25C, length=25
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 6
REM "start diskboot.bin"
FW 5
>>>
//"BL debug_blink\n"
"    BL      CreateTask_spytask\n"    // +
//"BL debug_blink\n"
#if defined(OPT_RUN_WITH_BATT_COVER_OPEN)
"    LDR     R0, =0xE0000\n"    // Pause for startup with battery door open
"batt_delay:\n"
"    NOP\n"
"    SUBS    R0,R0,#1\n"
"    BNE     batt_delay\n"
#endif
<<<
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// init_file_modules_task
//** init_file_modules_task @ 0xFF87F81C - 0xFF87F850, length=14
//////////////////////////////////////////////////////////////
FUNC sig=task_InitFileModules name=init_file_modules_task
ASM
FW 7
PATCHSUB ref=0
>>>
"    BL      core_spytask_can_start\n"    // +
<<<
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// init_file_modules_task -> ref=0
//** sub_FF874BB4_my @ 0xFF874BB4 - 0xFF874BF4, length=17
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 2
PATCHSUB ref=0
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// init_file_modules_task -> ref=0 -> ref=0
//** sub_FF857704_my @ 0xFF857704 - 0xFF8577D0, length=52
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 21
PATCHSUB ref=0
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// init_file_modules_task -> ref=0 -> ref=0 -> ref=0
//** sub_FF8574A4_my @ 0xFF8574A4 - 0xFF857504, length=25
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 10
PATCHSUB ref=0
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// init_file_modules_task -> ref=0 -> ref=0 -> ref=0 -> ref=0
//** sub_FF857234_my @ 0xFF857234 - 0xFF85739C, length=91
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 40
>>> file=../FAT32_detect.S
FW 7
REM "replaced below"
FW 12
REM "replaced below"
>>>
"    LDRB    R12, [LR,#0x1FE]\n"    // replace instructions above - First MBR signature byte (0x55), LR is original offset.
"    LDRB    LR, [LR,#0x1FF]\n"     // replace instructions above - Last MBR signature byte (0xAA), LR is original offset.
<<<
FW $
ENDASM
ENDFUNC


//////////////////////////////////////////////////////////////
// JogDial_task_my
//** JogDial_task_my @ 0xFF84856C - 0xFF848664, length=63
//////////////////////////////////////////////////////////////
FUNC sig=task_JogDial name=JogDial_task_my
ASM
FW 15
>>>
//------------------  added code ---------------------
"labelA:\n"
"    LDR     R0, =jogdial_stopped\n"
"    LDR     R0, [R0]\n"
"    CMP     R0, #1\n"
"    BNE     labelB\n"
"    MOV     R0, #40\n"
"    BL      _SleepTask\n"
"    B       labelA\n"
"labelB:\n"
//------------------  original code ------------------
<<<
FW $
ENDASM
ENDFUNC

ENDFILE
//-------------------------- MOVIE_REC.C ----------------------------------------------------------

FILE movie_rec.c

>>> file=../movie_rec_hdr.c

//////////////////////////////////////////////////////////////
// movie_record_task
//** movie_record_task @ 0xFF9382B8 - 0xFF9383BC, length=66
//////////////////////////////////////////////////////////////
FUNC sig=task_MovieRecord name=movie_record_task
ASM
FW 39
>>>
"    BL      unlock_optical_zoom\n"   // --> inserted to unlock the zoom
<<<
FW 2
PATCHSUB ref=0
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// movie_record_task -> ref=0
//** sub_FF937C70_my @ 0xFF937C70 - 0xFF937FE4, length=222
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 193
>>> prelabel
                                   //       |
"    LDR     R0, =0x65F0-4\n"      // -<---     // +
"    BL      set_quality\n"                     // +
<<<
FW $-7
ENDASM
ENDFUNC

ENDFILE
//-------------------------- CAPT_SEQ.C -----------------------------------------------------------
FILE capt_seq.c

>>> file=../capt_seq_hdr.c

//////////////////////////////////////////////////////////////
// capt_seq_task
//** capt_seq_task @ 0xFF86327C - 0xFF863594, length=199
//////////////////////////////////////////////////////////////
FUNC sig=task_CaptSeq name=capt_seq_task
ASM
FW 55
>>>
"    BL      shooting_expo_param_override\n"              // +
<<<
FW 1
>>>
// copied over from SX10 don't know if we need it yet
//  this code added to avoid some incorrect behavior if overrides are used.
//  but it can cause some unexpected side effects. In this case, remove this code!
"    MOV     R0, #0\n"
"    STR     R0, [R4,#0x24]\n"  // fixes overrides  behavior at short shutter press
//  end of my code
<<<
FW 19
PATCHSUB ref=0
>>>
"    BL      capt_seq_hook_raw_here\n"                    // +
<<<
FW 15
PATCHSUB ref=1
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// capt_seq_task -> ref=1
//** sub_FF862C18_my @ 0xFF862C18 - 0xFF862E18, length=129
//////////////////////////////////////////////////////////////
FUNC ref=1
ASM
FW 100
PATCHSUB ref=0
FW 1
>>>
"    BL      capt_seq_hook_raw_here\n"                   // +
<<<
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// capt_seq_task -> ref=0
//** sub_FF93D388_my @ 0xFF93D388 - 0xFF93D430, length=43
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 16
>>>
// ShutterSoundTask
<<<
FW 16
>>>
// had sub_FF8FDD18 -> sub_FFA2AC8C ???
<<<
FW 11
>>>
"    BL      wait_until_remote_button_is_released\n"     // +
"    BL      capt_seq_hook_set_nr\n"                     // +
<<<
->FW
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// exp_drv_task
//** exp_drv_task @ 0xFF8A2214 - 0xFF8A27CC, length=367
//////////////////////////////////////////////////////////////
FUNC sig=task_ExpDrv name=exp_drv_task
ASM
FW 246
PATCHSUB ref=0
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// exp_drv_task -> ref=0
//** sub_FF89FB44_my @ 0xFF89FB44 - 0xFF89FC7C, length=79
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 47
PATCHSUB ref=0
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// exp_drv_task -> ref=0 -> ref=0
//** sub_FF89141C_my @ 0xFF89141C - 0xFF891484, length=27
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 16
PATCHSUB name=apex2us
FW $
ENDASM
ENDFUNC

ENDFILE
//-------------------------- FILEWRITE.C ----------------------------------------------------------
FILE filewrite.c

>>> file=../filewrite_hdr.c

//////////////////////////////////////////////////////////////
// filewritetask
//////////////////////////////////////////////////////////////
FUNC sig=task_FileWrite name=filewritetask
ASM
FW 42
PATCHSUB name=fwt_close
FW 8
PATCHSUB ref=0 comment="Open stage"
FW 1
PATCHSUB ref=1 comment="Write stage"
FW 1
PATCHSUB ref=2 comment="Close stage"
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// open stage
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 13
>>>
//hook start
"    STMFD SP!, {R4-R12,LR}\n"
"    MOV R0, R4\n"
"    BL filewrite_main_hook\n"
"    LDMFD SP!, {R4-R12,LR}\n"
//hook end
<<<
FW 3
PATCHSUB name=fwt_open
->FW
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// write stage
//////////////////////////////////////////////////////////////
FUNC ref=1
ASM
FW 39
PATCHSUB name=fwt_write
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// close stage
//////////////////////////////////////////////////////////////
FUNC ref=2
ASM
FW 7
PATCHSUB name=fwt_close
->FW
ENDASM
ENDFUNC

ENDFILE
