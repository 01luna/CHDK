// !!! THIS FILE IS GENERATED. DO NOT EDIT. !!!
#include "stubs_asm.h"

// Best match: 79%
NHSTUB(AllocateMemory, 0xff811ba0)
NHSTUB(AllocateUncacheableMemory, 0xff814810)
// ERROR: Close is not found!
NHSTUB(CreatePhysicalVram, 0xff93e4f4)
NHSTUB(CreateTask, 0xff82239c)
NHSTUB(CreateTaskStrict, 0xff823964)
NHSTUB(DeleteFile_Fut, 0xff86fbf4)
NHSTUB(DisableDispatch, 0xff82210c)
// ERROR: DisplayImagePhysicalScreen is not found!
// Best match: 52%
//NHSTUB(DoAFLock, 0xff90903c) -- stubs_entry_2.S = 0xff967f70
// ALT: NHSTUB(DoAFLock, 0xff968294) // 12/11
NHSTUB(EnableDispatch, 0xff822198)
// ERROR: EnterToCompensationEVF is not found!
NHSTUB(ExecuteEventProcedure, 0xff816ab4)
// Best match: 70%
//NHSTUB(ExitFromCompensationEVF, 0xff96b6dc) -- stubs_entry_2.S = 0xff9681a4
NHSTUB(ExitTask, 0xff82275c)
NHSTUB(Fclose_Fut, 0xff86fd34)
NHSTUB(Feof_Fut, 0xff86ff48)
NHSTUB(Fflush_Fut, 0xff86ff80)
NHSTUB(Fgets_Fut, 0xff86feb8)
NHSTUB(Fopen_Fut, 0xff86fcf8)
NHSTUB(Fread_Fut, 0xff86fe18)
// Best match: 66%
NHSTUB(FreeMemory, 0xff811bac)
NHSTUB(FreeUncacheableMemory, 0xff814844)
NHSTUB(Fseek_Fut, 0xff86ff00)
NHSTUB(Fwrite_Fut, 0xff86fe68)
// ERROR: GetBatteryTemperature is not found!
// ERROR: GetCCDTemperature is not found!
NHSTUB(GetCurrentAvValue, 0xffaa6cc4)
// ALT: NHSTUB(GetCurrentAvValue, 0xffaa8c78) // 13/0
NHSTUB(GetCurrentTargetDistance, 0xffaa8c20)
// Best match: 72%
//NHSTUB(GetDrive_ClusterSize, 0xff876894) -- stubs_entry_2.S = 0xff8767a0
// ALT: NHSTUB(GetDrive_ClusterSize, 0xff876894) // 18/7
// Best match: 72%
//NHSTUB(GetDrive_FreeClusters, 0xff876894) -- stubs_entry_2.S = 0xff876838
// ALT: NHSTUB(GetDrive_FreeClusters, 0xff876894) // 18/7
// Best match: 80%
//NHSTUB(GetDrive_TotalClusters, 0xff876894) -- stubs_entry_2.S = 0xff8767fc
// Best match: 87%
NHSTUB(GetFocusLensSubjectDistance, 0xffa8e96c)
// ALT: NHSTUB(GetFocusLensSubjectDistance, 0xffa8e96c) // 27/4
// ERROR: GetFocusLensSubjectDistanceFromLens is not found!
// Best match: 55%
//NHSTUB(GetOpticalTemperature, 0xffa8ffec) -- stubs_entry_2.S = 0xff82e340
// Best match: 76%
NHSTUB(GetParameterData, 0xff987fe0)
// ALT: NHSTUB(GetParameterData, 0xff987fe0) // 23/7
// Best match: 71%
//NHSTUB(GetPropertyCase, 0xff825d04) -- stubs_entry_2.S = 0xff825d08
// Best match: 96%
NHSTUB(GetSystemTime, 0xff814b98)
// ALT: NHSTUB(GetSystemTime, 0xff814b98) // 26/1
// Best match: 68%
//NHSTUB(GetZoomLensCurrentPoint, 0xffa88174) -- stubs_entry_2.S = 0xffaa87a4
// ALT: NHSTUB(GetZoomLensCurrentPoint, 0xffa88174) // 20/9
// Best match: 51%
//NHSTUB(GetZoomLensCurrentPosition, 0xffa88188) -- stubs_entry_2.S = 0xffaa87b8
// ALT: NHSTUB(GetZoomLensCurrentPosition, 0xffa88188) // 15/14
NHSTUB(IsStrobeChargeCompleted, 0xff912f08)
// Best match: 96%
NHSTUB(LockMainPower, 0xff9834f0)
// ERROR: MakeAFScan is not found!
// Best match: 70%
NHSTUB(MakeDirectory, 0xff8775b0)
NHSTUB(MakeDirectory_Fut, 0xff86fc80)
// ERROR: Mount_FileSystem is not found!
// Best match: 96%
NHSTUB(MoveFocusLensToDistance, 0xffaa8eb0)
// ERROR: MoveZoomLensWithPoint is not found!
// ERROR: Open is not found!
NHSTUB(PT_PlaySound, 0xff97bd40)
// ERROR: PhySw_testgpio is not found!
NHSTUB(PostLogicalEventForNotPowerType, 0xff980180)
NHSTUB(PostLogicalEventToUI, 0xff98020c)
// ALT: NHSTUB(PostLogicalEventToUI, 0xff9802a4) // 25/0
NHSTUB(ProtectFile, 0xff86f360)
NHSTUB(PutInNdFilter, 0xffaa6cd8)
// ALT: NHSTUB(PutInNdFilter, 0xffaa6d20) // 27/0
// Best match: 94%
NHSTUB(PutOutNdFilter, 0xffaa7130)
// ALT: NHSTUB(PutOutNdFilter, 0xffaa7130) // 16/1
// ERROR: Read is not found!
NHSTUB(RefreshPhysicalScreen, 0xff9988dc)
// Best match: 52%
//NHSTUB(Remove, 0xff8d2934) -- stubs_entry_2.S = 0xff877380
NHSTUB(RenameFile_Fut, 0xff86fb74)
// Best match: 84%
//NHSTUB(Restart, 0xff823de4) -- stubs_entry_2.S = 0xff823de8
// Best match: 95%
NHSTUB(SetAE_ShutterSpeed, 0xffaabd8c)
// Best match: 96%
NHSTUB(SetAutoShutdownTime, 0xff9833e8)
// Best match: 73%
NHSTUB(SetCurrentCaptureModeType, 0xff9aed34)
// Best match: 58%
NHSTUB(SetFileAttributes, 0xff8774cc)
// Best match: 87%
NHSTUB(SetLogicalEventActive, 0xff981990)
// Best match: 66%
//NHSTUB(SetParameterData, 0xff987fdc) -- stubs_entry_2.S = 0xff987f0c
// ERROR: SetPropertyCase is not found!
NHSTUB(SleepTask, 0xff8221fc)
// ALT: NHSTUB(SleepTask, 0xff8222b0) // 31/0
NHSTUB(TakeSemaphore, 0xff821b6c)
NHSTUB(TurnOffBackLight, 0xff9cbf00)
NHSTUB(TurnOnBackLight, 0xff9cbed4)
// Best match: 78%
//NHSTUB(UnlockAF, 0xff90907c) -- stubs_entry_2.S = 0xff96804c
// Best match: 96%
NHSTUB(UnlockMainPower, 0xff9835a4)
NHSTUB(Unmount_FileSystem, 0xff8762d4)
// ERROR: UnsetZoomForMovie is not found!
// Best match: 96%
NHSTUB(UpdateMBROnFlash, 0xff876480)
// ERROR: VbattGet is not found!
// ERROR: Write is not found!
// ERROR: WriteSDCard is not found!
NHSTUB(_log, 0xffae0a40)
// ALT: NHSTUB(_log, 0xffae0a40) // 27/0
NHSTUB(_log10, 0xffae10e8)
// ALT: NHSTUB(_log10, 0xffae10e8) // 27/0
NHSTUB(_pow, 0xffae15d8)
// ALT: NHSTUB(_pow, 0xffae15d8) // 25/0
NHSTUB(_sqrt, 0xffae5924)
// ALT: NHSTUB(_sqrt, 0xffae5924) // 24/0
// Best match: 96%
NHSTUB(add_ptp_handler, 0xffa4bc48)
NHSTUB(apex2us, 0xff8bbe50)
NHSTUB(chdir, 0xffaf4b80)
// ALT: NHSTUB(chdir, 0xffaf4b80) // 27/0
NHSTUB(close, 0xffaf44c0)
NHSTUB(closedir, 0xffaf0460)
NHSTUB(errnoOfTaskGet, 0xffaf0c2c)
// Best match: 92%
NHSTUB(exmem_alloc, 0xff812a74)
// ERROR: free is not found!
NHSTUB(ints_disable, 0xff81e254)
NHSTUB(ints_enable, 0xff81e260)
NHSTUB(ioctl, 0xffaf4600)
NHSTUB(iosDevAdd, 0xffaf56e0)
NHSTUB(iosDevDelete, 0xffaf56b8)
NHSTUB(iosDevFind, 0xffaf566c)
NHSTUB(iosDrvInstall, 0xffaf59a4)
NHSTUB(isalpha, 0xffaea3d4)
NHSTUB(isdigit, 0xffaea404)
NHSTUB(islower, 0xffaea434)
NHSTUB(ispunct, 0xffaea464)
NHSTUB(isspace, 0xffaea47c)
NHSTUB(isupper, 0xffaea494)
NHSTUB(isxdigit, 0xffaea4ac)
// ERROR: kbd_p1_f is not found!
// ERROR: kbd_p1_f_cont is not found!
// ERROR: kbd_p2_f is not found!
// Best match: 83%
NHSTUB(kbd_pwr_off, 0xff82ae84)
// ALT: NHSTUB(kbd_pwr_off, 0xff82aea0) // 5/1
// ALT: NHSTUB(kbd_pwr_off, 0xff82af70) // 5/1
// ALT: NHSTUB(kbd_pwr_off, 0xff82af8c) // 5/1
// ALT: NHSTUB(kbd_pwr_off, 0xff82b0d4) // 5/1
// ALT: NHSTUB(kbd_pwr_off, 0xff82b0f0) // 5/1
// Best match: 55%
NHSTUB(kbd_pwr_on, 0xff9402d8)
// ALT: NHSTUB(kbd_pwr_on, 0xff940304) // 5/4
// ERROR: kbd_read_keys_r2 is not found!
// Best match: 93%
NHSTUB(localtime, 0xffaeec54)
NHSTUB(lseek, 0xffaf4604)
// Best match: 53%
NHSTUB(malloc, 0xffaf7500)
// ALT: NHSTUB(malloc, 0xffaf7500) // 15/13
NHSTUB(memPartInfoGet, 0xffaf7920)
NHSTUB(memchr, 0xffaee000)
NHSTUB(memcmp, 0xffaee034)
// ALT: NHSTUB(memcmp, 0xffafc41c) // 9/0
NHSTUB(memcpy, 0xffaee070)
NHSTUB(memset, 0xffaee0e8)
// Best match: 61%
NHSTUB(mkdir, 0xff8774fc)
// ALT: NHSTUB(mkdir, 0xff8775bc) // 19/12
NHSTUB(mktime, 0xffaeee1c)
NHSTUB(open, 0xffaf4b04)
NHSTUB(opendir, 0xffaf0494)
NHSTUB(qsort, 0xffaed894)
NHSTUB(rand, 0xffaed8b8)
// ALT: NHSTUB(rand, 0xffaed8b8) // 8/0
NHSTUB(read, 0xffaf4520)
NHSTUB(readdir, 0xffaf042c)
NHSTUB(rename, 0xffaf4b0c)
// ALT: NHSTUB(rename, 0xffaf4b0c) // 26/0
NHSTUB(rewinddir, 0xffaf0454)
NHSTUB(srand, 0xffaed8dc)
// ALT: NHSTUB(srand, 0xffaed8dc) // 4/0
NHSTUB(stat, 0xffaf0528)
NHSTUB(strcat, 0xffaee108)
NHSTUB(strchr, 0xffaee134)
NHSTUB(strcmp, 0xffaee158)
NHSTUB(strcpy, 0xffaee2ec)
NHSTUB(strftime, 0xffaef974)
NHSTUB(strlen, 0xffaee450)
NHSTUB(strncmp, 0xffaee4b4)
NHSTUB(strncpy, 0xffaee4f8)
// ALT: NHSTUB(strncpy, 0xffaee4f8) // 24/0
NHSTUB(strpbrk, 0xffaee540)
NHSTUB(strrchr, 0xffaee57c)
// ALT: NHSTUB(strrchr, 0xffaee57c) // 8/0
NHSTUB(strtol, 0xffaedcd0)
NHSTUB(strtoul, 0xffaede78)
NHSTUB(taskCreateHookAdd, 0xffafab80)
NHSTUB(taskDeleteHookAdd, 0xffafaabc)
// Best match: 82%
NHSTUB(taskIdListGet, 0xffb02664)
NHSTUB(taskLock, 0xffb02d20)
NHSTUB(taskName, 0xffb0255c)
NHSTUB(taskResume, 0xffb02940)
NHSTUB(taskSuspend, 0xffb0276c)
NHSTUB(taskUnlock, 0xffb02dc8)
NHSTUB(time, 0xffaef9a0)
// ALT: NHSTUB(time, 0xffaef9a0) // 25/0
NHSTUB(tolower, 0xffaea4c4)
NHSTUB(toupper, 0xffaea4d4)
NHSTUB(utime, 0xffaf05bc)
// ALT: NHSTUB(utime, 0xffaf05bc) // 26/0
NHSTUB(vsprintf, 0xffaf1d80)
NHSTUB(write, 0xffaf4590)
