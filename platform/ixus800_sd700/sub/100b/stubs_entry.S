// !!! THIS FILE IS GENERATED. DO NOT EDIT. !!!
#include "stubs_asm.h"

NHSTUB(AllocateMemory, 0xff811ac4)
NHSTUB(AllocateUncacheableMemory, 0xff814cb0)
NHSTUB(Close, 0xff86f5a4)
NHSTUB(CreatePhysicalVram, 0xff935150)
NHSTUB(CreateTask, 0xff82161c)
NHSTUB(CreateTaskStrict, 0xff8226bc)
NHSTUB(DeleteFile_Fut, 0xff868744)
NHSTUB(DisableDispatch, 0xff821440)
// Best match: 96%
NHSTUB(DisplayImagePhysicalScreen, 0xff934484)
// Best match: 56%
//NHSTUB(DoAFLock, 0xff95b418) -- stubs_entry_2.S = 0xff95b420
NHSTUB(EnableDispatch, 0xff8214cc)
// ERROR: EnterToCompensationEVF is not found!
NHSTUB(ExecuteEventProcedure, 0xff816bc8)
// Best match: 73%
//NHSTUB(ExitFromCompensationEVF, 0xff95d53c) -- stubs_entry_2.S = 0x00000000
NHSTUB(ExitTask, 0xff8219dc)
NHSTUB(Fclose_Fut, 0xff868884)
NHSTUB(Feof_Fut, 0xff868a98)
NHSTUB(Fflush_Fut, 0xff868ad0)
NHSTUB(Fgets_Fut, 0xff868a08)
NHSTUB(Fopen_Fut, 0xff868848)
NHSTUB(Fread_Fut, 0xff868968)
NHSTUB(FreeMemory, 0xff811ad0)
NHSTUB(FreeUncacheableMemory, 0xff814ce4)
NHSTUB(Fseek_Fut, 0xff868a50)
NHSTUB(Fwrite_Fut, 0xff8689b8)
// Best match: 85%
NHSTUB(GetBatteryTemperature, 0xff82d218)
// Best match: 86%
NHSTUB(GetCCDTemperature, 0xff82d204)
//NHSTUB(GetCurrentAvValue, 0xffac6198) -- stubs_entry_2.S = 0xffac401c
NHSTUB(GetCurrentTargetDistance, 0xffac6140)
// Best match: 76%
//NHSTUB(GetDrive_ClusterSize, 0xff86edcc) -- stubs_entry_2.S = 0xff86ed90
// Best match: 80%
//NHSTUB(GetDrive_FreeClusters, 0xff86edcc) -- stubs_entry_2.S = 0xff86ee08
// Best match: 84%
//NHSTUB(GetDrive_TotalClusters, 0xff86ed90) -- stubs_entry_2.S = 0xff86edcc
// Best match: 54%
NHSTUB(GetFocusLensSubjectDistance, 0xffab4f50)
// ALT: NHSTUB(GetFocusLensSubjectDistance, 0xffab4f50) // 17/14
// Best match: 92%
NHSTUB(GetFocusLensSubjectDistanceFromLens, 0xffab54ec)
// Best match: 86%
NHSTUB(GetOpticalTemperature, 0xff82d1f0)
// Best match: 86%
NHSTUB(GetParameterData, 0xff976f2c)
NHSTUB(GetPropertyCase, 0xff8248e0)
// Best match: 96%
NHSTUB(GetSystemTime, 0xff814ee8)
// ALT: NHSTUB(GetSystemTime, 0xff814ee8) // 26/1
// Best match: 93%
NHSTUB(GetZoomLensCurrentPoint, 0xffaa5f18)
// ALT: NHSTUB(GetZoomLensCurrentPoint, 0xffaa5f18) // 27/2
// Best match: 93%
NHSTUB(GetZoomLensCurrentPosition, 0xffaa5f2c)
// ALT: NHSTUB(GetZoomLensCurrentPosition, 0xffaa5f2c) // 27/2
NHSTUB(IsStrobeChargeCompleted, 0xff910478)
NHSTUB(LockMainPower, 0xff972100)
// ERROR: MakeAFScan is not found!
NHSTUB(MakeDirectory, 0xff86f848)
NHSTUB(MakeDirectory_Fut, 0xff8687d0)
// Best match: 90%
NHSTUB(Mount_FileSystem, 0xff86e8d4)
// ALT: NHSTUB(Mount_FileSystem, 0xff86e8d4) // 27/3
// Best match: 96%
NHSTUB(MoveFocusLensToDistance, 0xffac63e0)
NHSTUB(MoveZoomLensWithPoint, 0xffaa5df8)
// ALT: NHSTUB(MoveZoomLensWithPoint, 0xffaa5df8) // 25/0
NHSTUB(Open, 0xff86f57c)
NHSTUB(PT_PlaySound, 0xff969540)
// Best match: 89%
NHSTUB(PhySw_testgpio, 0xff827f94)
NHSTUB(PostLogicalEventForNotPowerType, 0xff96e030)
NHSTUB(PostLogicalEventToUI, 0xff96e0ac)
// ALT: NHSTUB(PostLogicalEventToUI, 0xff96e134) // 21/0
NHSTUB(ProtectFile, 0xff867eb0)
// Best match: 92%
NHSTUB(PutInNdFilter, 0xffac41a0)
// ALT: NHSTUB(PutInNdFilter, 0xffac41a0) // 25/2
// ALT: NHSTUB(PutInNdFilter, 0xffac5d40) // 25/2
// ALT: NHSTUB(PutInNdFilter, 0xffac5d40) // 25/2
// ALT: NHSTUB(PutInNdFilter, 0xffac5d88) // 25/2
// ALT: NHSTUB(PutInNdFilter, 0xffac5d88) // 25/2
// Best match: 94%
NHSTUB(PutOutNdFilter, 0xffac41e8)
// ALT: NHSTUB(PutOutNdFilter, 0xffac41e8) // 16/1
NHSTUB(Read, 0xff86f638)
NHSTUB(RefreshPhysicalScreen, 0xff988eec)
NHSTUB(Remove, 0xff86f5c4)
NHSTUB(RenameFile_Fut, 0xff8686c4)
NHSTUB(Restart, 0xff822b34)
// Best match: 95%
NHSTUB(SetAE_ShutterSpeed, 0xffac9c88)
NHSTUB(SetAutoShutdownTime, 0xff972004)
NHSTUB(SetCurrentCaptureModeType, 0xff9a3274)
NHSTUB(SetFileAttributes, 0xff86f75c)
// Best match: 88%
NHSTUB(SetLogicalEventActive, 0xff96fdf8)
// Best match: 86%
NHSTUB(SetParameterData, 0xff976e4c)
NHSTUB(SetPropertyCase, 0xff8247c4)
NHSTUB(SleepTask, 0xff821530)
NHSTUB(TakeSemaphore, 0xff82102c)
NHSTUB(TurnOffBackLight, 0xff9bb0ac)
NHSTUB(TurnOnBackLight, 0xff9bb07c)
// Best match: 78%
//NHSTUB(UnlockAF, 0xff903a58) -- stubs_entry_2.S = 0xff95b464
// ALT: NHSTUB(UnlockAF, 0xff95b468) // 11/3
NHSTUB(UnlockMainPower, 0xff972198)
NHSTUB(Unmount_FileSystem, 0xff86e978)
// Best match: 89%
NHSTUB(UnsetZoomForMovie, 0xff9ae16c)
NHSTUB(UpdateMBROnFlash, 0xff86eac8)
// ERROR: VbattGet is not found!
NHSTUB(Write, 0xff86f644)
// Best match: 64%
NHSTUB(WriteSDCard, 0xff87dfcc)
NHSTUB(_log, 0xffb01b34)
// ALT: NHSTUB(_log, 0xffb01b34) // 27/0
NHSTUB(_log10, 0xffafded4)
// ALT: NHSTUB(_log10, 0xffafded4) // 27/0
NHSTUB(_pow, 0xffafe05c)
// ALT: NHSTUB(_pow, 0xffafe05c) // 25/0
NHSTUB(_sqrt, 0xffafff30)
// ALT: NHSTUB(_sqrt, 0xffafff30) // 24/0
// Best match: 96%
NHSTUB(add_ptp_handler, 0xffa74c74)
NHSTUB(apex2us, 0xff8b1db0)
NHSTUB(chdir, 0xffb0c658)
// ALT: NHSTUB(chdir, 0xffb0c658) // 27/0
NHSTUB(close, 0xffb0bf98)
NHSTUB(closedir, 0xffb09420)
NHSTUB(errnoOfTaskGet, 0xffb09bec)
// Best match: 93%
NHSTUB(exmem_alloc, 0xff81282c)
// ERROR: free is not found!
NHSTUB(ints_disable, 0xff81da9c)
NHSTUB(ints_enable, 0xff81daa8)
NHSTUB(ioctl, 0xffb0c0d8)
NHSTUB(iosDevAdd, 0xffb0d1b8)
NHSTUB(iosDevDelete, 0xffb0d190)
NHSTUB(iosDevFind, 0xffb0d144)
NHSTUB(iosDrvInstall, 0xffb0d47c)
NHSTUB(isalpha, 0xffb034c4)
NHSTUB(isdigit, 0xffb034f4)
NHSTUB(islower, 0xffb03524)
NHSTUB(ispunct, 0xffb03554)
NHSTUB(isspace, 0xffb0356c)
NHSTUB(isupper, 0xffb03584)
NHSTUB(isxdigit, 0xffb0359c)
NHSTUB(kbd_p1_f, 0xff826cf0)
NHSTUB(kbd_p1_f_cont, 0xff826cfc)
NHSTUB(kbd_p2_f, 0xff8270d4)
// Best match: 83%
//NHSTUB(kbd_pwr_off, 0xff827f50) -- stubs_entry_2.S = 0xff827f08
// ALT: NHSTUB(kbd_pwr_off, 0xff827f50) // 5/1
// ALT: NHSTUB(kbd_pwr_off, 0xff827f6c) // 5/1
// ALT: NHSTUB(kbd_pwr_off, 0xff827f6c) // 5/1
// ALT: NHSTUB(kbd_pwr_off, 0xff828e5c) // 5/1
// ALT: NHSTUB(kbd_pwr_off, 0xff828e78) // 5/1
// ALT: NHSTUB(kbd_pwr_off, 0xff828f64) // 5/1
// ALT: NHSTUB(kbd_pwr_off, 0xff828f80) // 5/1
// ALT: NHSTUB(kbd_pwr_off, 0xff829050) // 5/1
// ALT: NHSTUB(kbd_pwr_off, 0xff82906c) // 5/1
// ALT: NHSTUB(kbd_pwr_off, 0xff8291b4) // 5/1
// ALT: NHSTUB(kbd_pwr_off, 0xff8291d0) // 5/1
// ERROR: kbd_pwr_on is not found!
NHSTUB(kbd_read_keys_r2, 0xff827a3c)
// Best match: 93%
NHSTUB(localtime, 0xffb07c14)
NHSTUB(lseek, 0xffb0c0dc)
// Best match: 53%
NHSTUB(malloc, 0xffb0efd8)
// ALT: NHSTUB(malloc, 0xffb0efd8) // 15/13
NHSTUB(memPartInfoGet, 0xffb0f3f8)
NHSTUB(memchr, 0xffb06fc0)
NHSTUB(memcmp, 0xffb06ff4)
// ALT: NHSTUB(memcmp, 0xffb13bb8) // 9/0
NHSTUB(memcpy, 0xffb07030)
NHSTUB(memset, 0xffb070a8)
NHSTUB(mkdir, 0xff86f78c)
NHSTUB(mktime, 0xffb07ddc)
NHSTUB(open, 0xffb0c5dc)
NHSTUB(opendir, 0xffb09454)
NHSTUB(qsort, 0xffb06854)
NHSTUB(rand, 0xffb06878)
// ALT: NHSTUB(rand, 0xffb06878) // 8/0
NHSTUB(read, 0xffb0bff8)
NHSTUB(readdir, 0xffb093ec)
NHSTUB(rename, 0xffb0c5e4)
// ALT: NHSTUB(rename, 0xffb0c5e4) // 26/0
NHSTUB(rewinddir, 0xffb09414)
NHSTUB(srand, 0xffb0689c)
// ALT: NHSTUB(srand, 0xffb0689c) // 4/0
NHSTUB(stat, 0xffb094e8)
NHSTUB(strcat, 0xffb070c8)
NHSTUB(strchr, 0xffb070f4)
NHSTUB(strcmp, 0xffb07118)
NHSTUB(strcpy, 0xffb072ac)
NHSTUB(strftime, 0xffb08934)
NHSTUB(strlen, 0xffb07410)
NHSTUB(strncmp, 0xffb07474)
NHSTUB(strncpy, 0xffb074b8)
// ALT: NHSTUB(strncpy, 0xffb074b8) // 24/0
NHSTUB(strpbrk, 0xffb07500)
NHSTUB(strrchr, 0xffb0753c)
// ALT: NHSTUB(strrchr, 0xffb0753c) // 8/0
NHSTUB(strtol, 0xffb06c90)
NHSTUB(strtoul, 0xffb06e38)
NHSTUB(taskCreateHookAdd, 0xffb12658)
NHSTUB(taskDeleteHookAdd, 0xffb12594)
// Best match: 82%
NHSTUB(taskIdListGet, 0xffb1c620)
NHSTUB(taskLock, 0xffb1ccdc)
NHSTUB(taskName, 0xffb1c518)
NHSTUB(taskResume, 0xffb1c8fc)
NHSTUB(taskSuspend, 0xffb1c728)
NHSTUB(taskUnlock, 0xffb1cd84)
NHSTUB(time, 0xffb08960)
// ALT: NHSTUB(time, 0xffb08960) // 25/0
NHSTUB(tolower, 0xffb035b4)
NHSTUB(toupper, 0xffb035c4)
NHSTUB(utime, 0xffb0957c)
// ALT: NHSTUB(utime, 0xffb0957c) // 26/0
NHSTUB(vsprintf, 0xffb0ad40)
NHSTUB(write, 0xffb0c068)
