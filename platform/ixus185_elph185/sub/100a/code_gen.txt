//-------------------------- BOOT.C ---------------------------------------------------------------

FILE boot.c

>>> file=../boot_hdr.c

FUNC start=0xFF82000C length=93 name=boot
ASM
FW $-1
>>>
/* CreateTask is located in ROM, patching the lower level CreateTask_low function instead
 * Note: task function is the first argument
*/
// Install CreateTask_low patch
"    LDR     R0, =patch_CreateTask_low\n"   // Patch data
"    LDM     R0, {R1,R2}\n"             // Get two patch instructions
"    LDR     R0, =hook_CreateTask_low\n"    // Address to patch
"    STM     R0, {R1,R2}\n"             // Store patch instructions

<<<
PATCHSUB ref=0
>>>

"patch_CreateTask_low:\n"
"    LDR     PC, [PC,#-0x4]\n"          // Do jump to absolute address CreateTask_my
"    .long   CreateTask_low_my\n"
<<<
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// hook_CreateTask
//////////////////////////////////////////////////////////////
FUNC sig=hook_CreateTask_low name=CreateTask_low_my
ASM
>>> file=../taskhook.S
FW 2
->FW
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// Power-on patch
//////////////////////////////////////////////////////////////
FUNC ref=0 length=27
>>>

    //Replacement of sub_ for correct power-on.
    //(short press = playback mode, long press = record mode)
    // value and pointer from sub_FF86FC2C ixus185_100a
    *(int*)(0x2c78+0x4) = (*(int*)0xC022F484)&0x20000 ? 0x400000 : 0x200000;

<<<
ASM
FW $-1
PATCHSUB ref=0
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// ok
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 17
>>>

#if defined(CHDK_NOT_IN_CANON_HEAP) // use original heap offset if CHDK is loaded in high memory
<<<
FW
>>>
#else
"    LDR     R0, =new_sa\n"   // otherwise use patched value
"    LDR     R0, [R0]\n"      //
#endif

<<<
FW 31
PATCHSUB ref=0
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// ok
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW $-1
PATCHSUB ref=0
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
//
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 13
REM
REM "startup check,disabled"
REM
REM
REM
REM
FW L25
PATCHSUB ref=0 name=task_Startup_my
FW $
ENDASM
ENDFUNC
//////////////////////////////////////////////////////////////
// task_Startup_my
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 6
REM "load DISKBOOT.BIN"
FW 6
>>>
"    BL      CreateTask_spytask\n" // added
<<<
PATCHSUB ref=0 name=taskcreatePhySw_my
>>>
"    BL      init_required_fw_features\n" // added
<<<
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// taskcreatePhySw_my
//////////////////////////////////////////////////////////////
FUNC ref=0 length=19
ASM
FW 12
PATCHSUB name=mykbd_task
PATCHVAL value=0x2000 comment="stack size for new task_PhySw so we don't have to do stack switch"
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// init_file_modules_task
//////////////////////////////////////////////////////////////
FUNC sig=task_InitFileModules name=init_file_modules_task
ASM
FW 10
>>>
"    BL      core_spytask_can_start\n"  // CHDK: Set "it's-safe-to-start" flag for spytask
<<<
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// extra physw task override
//////////////////////////////////////////////////////////////
FUNC sig=kbd_p1_f_cont name=kbd_p1_f_cont_my
ASM
FW 13
>>>
"    bl      xtra_kbd_cb \n"            // + returns part of physw_status when overriding, -1 otherwise
"    mov     r3, r0 \n"                 // + provide new argument for the next function
<<<
FW 3
PATCHSUB ref=0
->FW
ENDASM
ENDFUNC

FUNC ref=0
ASM
FW 2
REM "- should be (physw_status[0] & 0xffff) when overriding, -1 otherwise. 
>>>
"    mov     r0, r3 \n"  // + (new argument to allow passing our variable)
<<<
->FW
ENDASM
ENDFUNC

>>> file=../boot_extras.c

ENDFILE

//-------------------------- CAPT_SEQ.C -----------------------------------------------------------

FILE capt_seq.c

>>> file=../capt_seq_hdr.c

//////////////////////////////////////////////////////////////
// capt_seq_task
//////////////////////////////////////////////////////////////
FUNC sig=task_CaptSeq name=capt_seq_task
ASM
FW 78
>>>
"    BL      shooting_expo_param_override\n"    // added
<<<
FW 1
>>>
//To do: Check if this is needed.
//"    MOV     R0, #0\n"                          // added
//"    STR     R0, [R5,#0x24]\n"                  // added, fixes overrides behavior at short shutter press (from S95)
<<<
//REM "above patch makes these three lines redundant"
//REM
//REM
FW 2
// hook fast click function for dfs and remote - not needed if using hack above
PATCHSUB ref=0
FW 2
PATCHSUB ref=1
FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// patch for dfs + remote in quickshoot branch: capt_seq_task -> ref=0
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 45
PATCHSUB

FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// raw hook: capt_seq_task -> ref=1
//////////////////////////////////////////////////////////////
FUNC ref=1
ASM
FW 27
//PATCHSUB ref=1
//FW 1
//FW 2
PATCHSUB ref=0
FW 13
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// 
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 123
PATCHSUB ref 0

FW $
ENDASM
ENDFUNC

//////////////////////////////////////////////////////////////
// 5
//////////////////////////////////////////////////////////////
FUNC ref=0
ASM
FW 65
>>>
"    BL      wait_until_remote_button_is_released\n" // added
"    BL      capt_seq_hook_set_nr\n"                 // added
<<<

FW 110
>>> prelabel
"    BL      capt_seq_hook_raw_here \n"         // added
<<<
FW $-4
>>>
"    .ltorg\n"         // added
<<<
ENDASM
ENDFUNC

ENDFILE
